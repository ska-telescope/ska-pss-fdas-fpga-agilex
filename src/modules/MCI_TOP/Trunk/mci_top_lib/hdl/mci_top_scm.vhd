----------------------------------------------------------------------------
-- Module Name:  mci_top
--
-- Source Path:  mci_top_lib/hdl/mci_top_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 13:39:07 12/04/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2023 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library mci_top_lib;

architecture scm of mci_top is

  -- Architecture declarations

  -- Internal signal declarations
  signal cld_reset_in_s      : std_logic;
  signal conv_reset_in_s     : std_logic;
  signal ctrl_reset_in_s     : std_logic;
  signal ddr_1_reset_in_s    : std_logic;
  signal ddrif_1_reset_in_s  : std_logic;
  signal ddrif_2_reset_in_s  : std_logic;
  signal ddrif_pcie_reset_s  : std_logic;
  signal hsum_reset_in_s     : std_logic;
  signal mcdataout_mci_top_s : std_logic_vector(31 downto 0);
  signal mcms_topmciI_1_s    : std_logic;
  signal ddr_2_reset_in_s    : std_logic;
  signal msix_reset_in_s     : std_logic;
  signal ddr_0_reset_in_s    : std_logic;
  signal ddr_3_reset_in_s    : std_logic;
  signal ddrif_3_reset_in_s  : std_logic;
  signal ddrif_0_reset_in_s  : std_logic;


  -- Component Declarations
  component mci_top_dataor
  port (
    mcdataout_conv    : in     std_logic_vector (31 downto 0);
    mcdataout_ctrl    : in     std_logic_vector (31 downto 0);
    mcdataout_hsum    : in     std_logic_vector (31 downto 0);
    mcdataout_mci_top : in     std_logic_vector (31 downto 0);
    mcdataout_msix    : in     std_logic_vector (31 downto 0);
    mcdataout_pcif    : out    std_logic_vector (31 downto 0)
  );
  end component mci_top_dataor;
  component mci_top_decodemci
  port (
    MCADDR        : in     std_logic_vector (21 downto 0);
    MCCS          : in     std_logic ;
    MCMS_TOPMCI_1 : out    std_logic ;
    MCMS_CTRL_1   : out    std_logic ;
    MCMS_MSIX_1   : out    std_logic ;
    MCMS_CONV_1   : out    std_logic ;
    MCMS_HSUM_1   : out    std_logic 
  );
  end component mci_top_decodemci;
  component mci_top_reset
  port (
    cld_reset_in        : in     std_logic ;
    conv_reset_in       : in     std_logic ;
    ctrl_reset_in       : in     std_logic ;
    ddr_0_reset_in      : in     std_logic ;
    ddr_1_reset_in      : in     std_logic ;
    ddr_2_reset_in      : in     std_logic ;
    ddr_3_reset_in      : in     std_logic ;
    ddrif_0_reset_in    : in     std_logic ;
    ddrif_1_reset_in    : in     std_logic ;
    ddrif_2_reset_in    : in     std_logic ;
    ddrif_3_reset_in    : in     std_logic ;
    ddrif_pcie_reset_in : in     std_logic ;
    hsum_reset_in       : in     std_logic ;
    msix_reset_in       : in     std_logic ;
    resetn              : in     std_logic ;
    cld_resetn          : out    std_logic ;
    conv_resetn         : out    std_logic ;
    ctrl_resetn         : out    std_logic ;
    ddr_0_resetn        : out    std_logic ;
    ddr_1_resetn        : out    std_logic ;
    ddr_2_resetn        : out    std_logic ;
    ddr_3_resetn        : out    std_logic ;
    ddrif_0_resetn      : out    std_logic ;
    ddrif_1_resetn      : out    std_logic ;
    ddrif_2_resetn      : out    std_logic ;
    ddrif_3_resetn      : out    std_logic ;
    ddrif_pcie_resetn   : out    std_logic ;
    hsum_resetn         : out    std_logic ;
    msix_resetn         : out    std_logic 
  );
  end component mci_top_reset;
  component mci_topmci
  port (
    MCADDR           : in     std_logic_vector (19 downto 0);
    MCDATAIN         : in     std_logic_vector (31 downto 0);
    MCDATAOUT        : out    std_logic_vector (31 downto 0);
    MCRWN            : in     std_logic ;
    MCMS             : in     std_logic ;
    CLK_MC           : in     std_logic ;
    RST_MC_N         : in     std_logic ;
    PRODUCT_ID       : in     std_logic_vector (15 downto 0);
    CORE_VERSION     : in     std_logic_vector (15 downto 0);
    CORE_REVISION    : in     std_logic_vector (15 downto 0);
    TOP_VERSION      : in     std_logic_vector (15 downto 0);
    TOP_REVISION     : in     std_logic_vector (15 downto 0);
    CTRL_RESET       : out    std_logic ;
    CLD_RESET        : out    std_logic ;
    CONV_RESET       : out    std_logic ;
    HSUM_RESET       : out    std_logic ;
    DDRIF_0_RESET    : out    std_logic ;
    DDRIF_1_RESET    : out    std_logic ;
    DDRIF_2_RESET    : out    std_logic ;
    DDRIF_3_RESET    : out    std_logic ;
    DDRIF_PCIE_RESET : out    std_logic ;
    DDR_0_RESET      : out    std_logic ;
    DDR_1_RESET      : out    std_logic ;
    DDR_2_RESET      : out    std_logic ;
    DDR_3_RESET      : out    std_logic ;
    MSIX_RESET       : out    std_logic ;
    DDR_0_CAL_FAIL   : in     std_logic ;
    DDR_0_CAL_PASS   : in     std_logic ;
    DDR_1_CAL_FAIL   : in     std_logic ;
    DDR_1_CAL_PASS   : in     std_logic ;
    DDR_2_CAL_FAIL   : in     std_logic ;
    DDR_2_CAL_PASS   : in     std_logic ;
    DDR_3_CAL_FAIL   : in     std_logic ;
    DDR_3_CAL_PASS   : in     std_logic ;
    DDR_0_RESET_DONE : in     std_logic ;
    DDR_1_RESET_DONE : in     std_logic ;
    DDR_2_RESET_DONE : in     std_logic ;
    DDR_3_RESET_DONE : in     std_logic 
  );
  end component mci_topmci;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : mci_top_dataor use entity mci_top_lib.mci_top_dataor;
  for all : mci_top_decodemci use entity mci_top_lib.mci_top_decodemci;
  for all : mci_top_reset use entity mci_top_lib.mci_top_reset;
  for all : mci_topmci use entity mci_top_lib.mci_topmci;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  dataor_1 : mci_top_dataor
    port map (
      mcdataout_conv    => mcdataout_conv,
      mcdataout_ctrl    => mcdataout_ctrl,
      mcdataout_hsum    => mcdataout_hsum,
      mcdataout_mci_top => mcdataout_mci_top_s,
      mcdataout_msix    => mcdataout_msix,
      mcdataout_pcif    => mcdataout_pcif
    );
  decodemci_1 : mci_top_decodemci
    port map (
      MCADDR        => mcaddr_pcif,
      MCCS          => mccs_pcif,
      MCMS_TOPMCI_1 => mcms_topmciI_1_s,
      MCMS_CTRL_1   => mcms_ctrl,
      MCMS_MSIX_1   => mcms_msix,
      MCMS_CONV_1   => mcms_conv,
      MCMS_HSUM_1   => mcms_hsum
    );
  reset_1 : mci_top_reset
    port map (
      cld_reset_in        => cld_reset_in_s,
      conv_reset_in       => conv_reset_in_s,
      ctrl_reset_in       => ctrl_reset_in_s,
      ddr_0_reset_in      => ddr_0_reset_in_s,
      ddr_1_reset_in      => ddr_1_reset_in_s,
      ddr_2_reset_in      => ddr_2_reset_in_s,
      ddr_3_reset_in      => ddr_3_reset_in_s,
      ddrif_0_reset_in    => ddrif_0_reset_in_s,
      ddrif_1_reset_in    => ddrif_1_reset_in_s,
      ddrif_2_reset_in    => ddrif_2_reset_in_s,
      ddrif_3_reset_in    => ddrif_3_reset_in_s,
      ddrif_pcie_reset_in => ddrif_pcie_reset_s,
      hsum_reset_in       => hsum_reset_in_s,
      msix_reset_in       => msix_reset_in_s,
      resetn              => resetn,
      cld_resetn          => cld_resetn,
      conv_resetn         => conv_resetn,
      ctrl_resetn         => ctrl_resetn,
      ddr_0_resetn        => ddr_0_resetn,
      ddr_1_resetn        => ddr_1_resetn,
      ddr_2_resetn        => ddr_2_resetn,
      ddr_3_resetn        => ddr_3_resetn,
      ddrif_0_resetn      => ddrif_0_resetn,
      ddrif_1_resetn      => ddrif_1_resetn,
      ddrif_2_resetn      => ddrif_2_resetn,
      ddrif_3_resetn      => ddrif_3_resetn,
      ddrif_pcie_resetn   => ddrif_pcie_resetn,
      hsum_resetn         => hsum_resetn,
      msix_resetn         => msix_resetn
    );
  mci_1 : mci_topmci
    port map (
      MCADDR           => mcaddr_pcif(19 DOWNTO 0),
      MCDATAIN         => mcdatain_pcif,
      MCDATAOUT        => mcdataout_mci_top_s,
      MCRWN            => mcrwn_pcif,
      MCMS             => mcms_topmciI_1_s,
      CLK_MC           => clk_mc,
      RST_MC_N         => rst_mc_n,
      PRODUCT_ID       => product_id,
      CORE_VERSION     => core_version,
      CORE_REVISION    => core_revision,
      TOP_VERSION      => top_version,
      TOP_REVISION     => top_revision,
      CTRL_RESET       => ctrl_reset_in_s,
      CLD_RESET        => cld_reset_in_s,
      CONV_RESET       => conv_reset_in_s,
      HSUM_RESET       => hsum_reset_in_s,
      DDRIF_0_RESET    => ddrif_0_reset_in_s,
      DDRIF_1_RESET    => ddrif_1_reset_in_s,
      DDRIF_2_RESET    => ddrif_2_reset_in_s,
      DDRIF_3_RESET    => ddrif_3_reset_in_s,
      DDRIF_PCIE_RESET => ddrif_pcie_reset_s,
      DDR_0_RESET      => ddr_0_reset_in_s,
      DDR_1_RESET      => ddr_1_reset_in_s,
      DDR_2_RESET      => ddr_2_reset_in_s,
      DDR_3_RESET      => ddr_3_reset_in_s,
      MSIX_RESET       => msix_reset_in_s,
      DDR_0_CAL_FAIL   => ddr_0_cal_fail,
      DDR_0_CAL_PASS   => ddr_0_cal_pass,
      DDR_1_CAL_FAIL   => ddr_1_cal_fail,
      DDR_1_CAL_PASS   => ddr_1_cal_pass,
      DDR_2_CAL_FAIL   => ddr_2_cal_fail,
      DDR_2_CAL_PASS   => ddr_2_cal_pass,
      DDR_3_CAL_FAIL   => ddr_3_cal_fail,
      DDR_3_CAL_PASS   => ddr_3_cal_pass,
      DDR_0_RESET_DONE => ddr_0_reset_done,
      DDR_1_RESET_DONE => ddr_1_reset_done,
      DDR_2_RESET_DONE => ddr_2_reset_done,
      DDR_3_RESET_DONE => ddr_3_reset_done
    );

end architecture scm;
