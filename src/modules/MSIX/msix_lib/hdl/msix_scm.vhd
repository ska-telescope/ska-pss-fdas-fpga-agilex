----------------------------------------------------------------------------
-- Module Name:  msix
--
-- Source Path:  msix_lib/hdl/msix_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 13:02:58 21/04/2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2022 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;

library msix_lib;

architecture scm of msix is

  -- Architecture declarations

  -- Internal signal declarations
  signal cld_msix_data_s  : std_logic_vector(15 downto 0);
  signal cld_msix_en_s    : std_logic;
  signal cld_toggle_s     : std_logic;
  signal conv_msix_data_s : std_logic_vector(15 downto 0);
  signal conv_msix_ens_s  : std_logic;
  signal conv_toggle_s    : std_logic;
  signal hsum_msix_data_s : std_logic_vector(15 downto 0);
  signal hsum_msix_en_s   : std_logic;
  signal hsum_toggle_s    : std_logic;


  -- Component Declarations
  component msixmci
  port (
    MCADDR         : in     std_logic_vector (3 downto 0);
    MCDATAIN       : in     std_logic_vector (31 downto 0);
    MCDATAOUT      : out    std_logic_vector (31 downto 0);
    MCRWN          : in     std_logic ;
    MCMS           : in     std_logic ;
    CLK_MC         : in     std_logic ;
    RST_MC_N       : in     std_logic ;
    CLD_MSIX_DATA  : out    std_logic_vector (15 downto 0);
    CLD_MSIX_EN    : out    std_logic ;
    CONV_MSIX_DATA : out    std_logic_vector (15 downto 0);
    CONV_MSIX_EN   : out    std_logic ;
    HSUM_MSIX_DATA : out    std_logic_vector (15 downto 0);
    HSUM_MSIX_EN   : out    std_logic 
  );
  end component msixmci;
  component msixpulsedet
  port (
    cld_done    : in     std_logic ;
    clk_sys     : in     std_logic ;
    conv_done   : in     std_logic ;
    hsum_done   : in     std_logic ;
    rst_sys_n   : in     std_logic ;
    cld_toggle  : out    std_logic ;
    conv_toggle : out    std_logic ;
    hsum_toggle : out    std_logic 
  );
  end component msixpulsedet;
  component msixtxint
  port (
    clk_pcie             : in     std_logic ;
    rst_pcie_n           : in     std_logic ;
    cld_toggle           : in     std_logic ;
    conv_toggle          : in     std_logic ;
    hsum_toggle          : in     std_logic ;
    cld_msix_data        : in     std_logic_vector (15 downto 0);
    cld_msix_en          : in     std_logic ;
    conv_msix_data       : in     std_logic_vector (15 downto 0);
    usr_event_msix_valid : out    std_logic ;
    usr_event_msix_data  : out    std_logic_vector (15 downto 0);
    conv_msix_en         : in     std_logic ;
    hsum_msix_data       : in     std_logic_vector (15 downto 0);
    hsum_msix_en         : in     std_logic ;
    usr_event_msix_ready : in     std_logic 
  );
  end component msixtxint;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : msixmci use entity msix_lib.msixmci;
  for all : msixpulsedet use entity msix_lib.msixpulsedet;
  for all : msixtxint use entity msix_lib.msixtxint;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  mci_1 : msixmci
    port map (
      MCADDR         => MCADDR,
      MCDATAIN       => MCDATAIN,
      MCDATAOUT      => MCDATAOUT,
      MCRWN          => MCRWN,
      MCMS           => MCMS,
      CLK_MC         => CLK_MC,
      RST_MC_N       => RST_MC_N,
      CLD_MSIX_DATA  => cld_msix_data_s,
      CLD_MSIX_EN    => cld_msix_en_s,
      CONV_MSIX_DATA => conv_msix_data_s,
      CONV_MSIX_EN   => conv_msix_ens_s,
      HSUM_MSIX_DATA => hsum_msix_data_s,
      HSUM_MSIX_EN   => hsum_msix_en_s
    );
  pulsedet_1 : msixpulsedet
    port map (
      cld_done    => CLD_DONE,
      clk_sys     => CLK_SYS,
      conv_done   => CONV_DONE,
      hsum_done   => HSUM_DONE,
      rst_sys_n   => RST_SYS_N,
      cld_toggle  => cld_toggle_s,
      conv_toggle => conv_toggle_s,
      hsum_toggle => hsum_toggle_s
    );
  txint_1 : msixtxint
    port map (
      clk_pcie             => CLK_PCIE,
      rst_pcie_n           => RST_PCIE_N,
      cld_toggle           => cld_toggle_s,
      conv_toggle          => conv_toggle_s,
      hsum_toggle          => hsum_toggle_s,
      cld_msix_data        => cld_msix_data_s,
      cld_msix_en          => cld_msix_en_s,
      conv_msix_data       => conv_msix_data_s,
      usr_event_msix_valid => USR_EVENT_MSIX_VALID,
      usr_event_msix_data  => USR_EVENT_MSIX_DATA,
      conv_msix_en         => conv_msix_ens_s,
      hsum_msix_data       => hsum_msix_data_s,
      hsum_msix_en         => hsum_msix_en_s,
      usr_event_msix_ready => USR_EVENT_MSIX_READY
    );

end architecture scm;
