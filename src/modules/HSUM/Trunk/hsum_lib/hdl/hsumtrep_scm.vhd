----------------------------------------------------------------------------
-- Module Name:  hsumtrep
--
-- Source Path:  hsum_lib/hdl/hsumtrep_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 10:27:04 31/01/2024
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2024 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
library hsum_lib;
use hsum_lib.hsummci_pkg.all;
use hsum_lib.hsum_pkg.all;


architecture scm of hsumtrep is

  -- Architecture declarations
  -- Define types for signals used to re-order the result information for feeding in to the HRES sub-modules.
  type pwr_t is array(0 to harmonic_g-1) of std_logic_vector(summer_g*res_per_h_c(harmonic_g-1)*32-1 downto 0);
  type tc_t  is array(0 to harmonic_g-1) of std_logic_vector(summer_g*res_per_h_c(harmonic_g-1)-1 downto 0);
  type row_t is array(0 to harmonic_g-1) of std_logic_vector(summer_g*7-1 downto 0);
  
  
  -- Define types for connecting micro read back to hsumtres instances.
  type results_rd_t is array(0 to harmonic_g-1) of std_logic_vector(31 downto 0);
  type exc_rd_t is array(0 to harmonic_g-1) of std_logic_vector(31 downto 0);

  -- Internal signal declarations
  signal tc_filt_s       : std_logic_vector(tc'range);
  -- To hsumhres sub-modules.
  signal working_page_s  : std_logic;
  signal tc_s            : tc_t;
  signal pwr_s           : pwr_t;
  signal row_s           : row_t;
  signal results_rd_s    : results_rd_t;
  signal exc_rd_s        : exc_rd_t;
  signal pwr_filt_s      : std_logic_vector(pwr'range);
  signal row_info_filt_s : std_logic_vector(row_info'range);
  signal seed_col_filt_s : std_logic_vector(summer_g*22-1 downto 0);
  signal save_done_s     : std_logic_vector(harmonic_g-1 downto 0);    -- Indication that saving of results is complete.
  signal seed_col_s      : std_logic_vector(21 downto 0);

  -- Implicit buffer signal declarations
  signal dm_cnt_internal : std_logic_vector (31 downto 0);


  -- Component Declarations
  component hsumdmcount
  port (
    -- Control from TGEN.
    triggered    : in     std_logic ;      -- Indicates HSUM_TRIGGER has been activated.
    hsum_done    : in     std_logic ;      -- Indicates end of run(s).
    -- Configuration.
    dm_cnt_reset : in     std_logic ;      -- Clear strobe for DM_CNT.
    -- Micro read back of count.
    dm_cnt       : out    std_logic_vector ;
    -- To hsumhres sub-modules.
    working_page : out    std_logic ;
    -- Clocks and reset.
    clk_sys      : in     std_logic ;
    rst_sys_n    : in     std_logic 
  );
  end component hsumdmcount;
  component hsumfilt
  generic (
    adder_latency_g : natural range 1 to 7;
    harmonic_g      : natural range 8 to 16    --Max number of harmonics that may be processed (including fundamental).
  );
  port (
    -- Configuration.
    h             : in     std_logic_vector (3 downto 0);                              -- Number of harmonics to process.
    a             : in     std_logic_vector (3 downto 0);                              -- Number of orbital acceleration ambiguity slopes to process.
    t_filter_en   : in     std_logic ;                                                 -- Filter enable.
    -- Inputs from SUMMER.
    tc_in         : in     std_logic_vector (last_column_c(harmonic_g-1)-1 downto 0);
    pwr_in        : in     std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0);
    row_info_in   : in     std_logic_vector (harmonic_g*7-1 downto 0);
    last_result   : in     std_logic ;
    -- Inputs from TGEN.
    seed_col      : in     std_logic_vector (21 downto 0);
    clear_results : in     std_logic ;                                                 -- Initialise filter.
    -- Outputs to result store.
    tc_out        : out    std_logic_vector (last_column_c(harmonic_g-1)-1 downto 0);
    pwr_out       : out    std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0);
    row_info_out  : out    std_logic_vector (harmonic_g*7-1 downto 0);
    seed_col_out  : out    std_logic_vector (21 downto 0);
    -- Clock and reset.
    clk_sys       : in     std_logic ;
    rst_sys_n     : in     std_logic 
  );
  end component hsumfilt;
  component hsumhres
  generic (
    summer_g       : natural range 1 to 3;    -- Number of SUMMERs.
    harmonic_num_g : natural range 0 to 15    -- Harmonic number processed by this block.
  );
  port (
    analysis_run  : in     std_logic ;                                                            -- Run number.
    row_info      : in     std_logic_vector (summer_g*7-1 downto 0);                              -- Row number.
    pwr           : in     std_logic_vector (summer_g*res_per_h_c(harmonic_num_g)*32-1 downto 0); -- Summed power values.
    tc            : in     std_logic_vector (summer_g*res_per_h_c(harmonic_num_g)-1 downto 0);    -- Indicates threshold has been crossed.
    seed_col      : in     std_logic_vector (21 downto 0);                                        -- FOP seed column.
    clear_results : in     std_logic ;                                                            -- Clears working results store.
    save_results  : in     std_logic ;                                                            -- Saves working results to RAM.
    working_page  : in     std_logic ;                                                            -- Indicates working page of RAM result store.
    dm_count      : in     std_logic_vector (31 downto 0);                                        -- DM number being processed.
    save_done     : out    std_logic ;                                                            -- Indication that saving of results is complete.
    -- Micro read back of results.
    results       : in     results_out_t ;
    results_rd    : out    std_logic_vector (31 downto 0);
    exc           : in     exc_out_t ;
    exc_rd        : out    std_logic_vector (31 downto 0);
    -- Clocks and reset.
    clk_sys       : in     std_logic ;
    rst_sys_n     : in     std_logic ;
    clk_mc        : in     std_logic 
  );
  end component hsumhres;
  component hsumselseed
  generic (
    summer_g : natural
  );
  port (
    a            : in     vector_4_array_t (0 to summer_g-1);
    seed_col_in  : in     std_logic_vector (22*summer_g-1 downto 0);
    seed_col_out : out    std_logic_vector (21 downto 0)
  );
  end component hsumselseed;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : hsumdmcount use entity hsum_lib.hsumdmcount;
  for all : hsumselseed use entity hsum_lib.hsumselseed;
  -- pragma synthesis_on


begin
  -- Architecture concurrent statements
  -- HDL Embedded Text Block 2 eb2
  -- Connect one of the save done outputs from HRES to the output.
  consd : save_done <= save_done_s(0);

  -- HDL Embedded Text Block 12 eb12
  -- OR together the results_rd signals.
  result_or : process(results_rd_s)
    variable or_results_v : std_logic_vector(31 downto 0);
  begin
    or_results_v := (others => '0');
    for i in 0 to harmonic_g-1 loop
      or_results_v := or_results_v or results_rd_s(i);
    end loop;
    results_rd <= or_results_v;
  end process result_or;

  -- HDL Embedded Text Block 13 eb13
  -- OR together the exc_rd signals.
  exc_or : process(exc_rd_s)
    variable or_exc_v : std_logic_vector(31 downto 0);
  begin
    or_exc_v := (others => '0');
    for i in 0 to harmonic_g-1 loop
      or_exc_v := or_exc_v or exc_rd_s(i);
    end loop;
    exc_rd <= or_exc_v;
  end process exc_or;


  -- Instance port mappings.
  dmcount_i : hsumdmcount
    port map (
      triggered    => triggered,
      hsum_done    => hsum_done,
      dm_cnt_reset => dm_cnt_reset,
      dm_cnt       => dm_cnt_internal,
      working_page => working_page_s,
      clk_sys      => clk_sys,
      rst_sys_n    => rst_sys_n(0)
    );
  selseed_i : hsumselseed
    generic map (
      summer_g => summer_g
    )
    port map (
      a            => a,
      seed_col_in  => seed_col_filt_s,
      seed_col_out => seed_col_s
    );

  -- Instantiate a filter block per SUMMER.
  filtgen: for s in 0 to summer_g-1 generate
  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : hsumfilt use entity hsum_lib.hsumfilt;
  -- pragma synthesis_on

  begin
    filter_i : hsumfilt
      generic map (
        adder_latency_g => adder_latency_g,
        harmonic_g      => harmonic_g        --Max number of harmonics that may be processed (including fundamental).
      )
      port map (
        h => h,
        t_filter_en => t_filter_en,
        seed_col => seed_col_sum,
        clear_results => clear_results,
        clk_sys => clk_sys,
        rst_sys_n => rst_sys_n(s),
        a => a(s),
        tc_in => tc((s+1)*last_column_c(harmonic_g-1)-1 downto s*last_column_c(harmonic_g-1)),
        pwr_in => pwr((s+1)*last_column_c(harmonic_g-1)*32-1 downto s*last_column_c(harmonic_g-1)*32),
        row_info_in => row_info((s+1)*harmonic_g*7-1 downto s*harmonic_g*7),
        last_result => last_result(s),
        tc_out => tc_filt_s((s+1)*last_column_c(harmonic_g-1)-1 downto s*last_column_c(harmonic_g-1)),
        pwr_out => pwr_filt_s((s+1)*last_column_c(harmonic_g-1)*32-1 downto s*last_column_c(harmonic_g-1)*32),
        row_info_out => row_info_filt_s((s+1)*harmonic_g*7-1 downto s*harmonic_g*7),
        seed_col_out => seed_col_filt_s((s+1)*22-1 downto s*22)
      );
  end generate filtgen;

  -- Re-order signals into a vector per harmonic, with results in order of increasing Summer number.
  g1: FOR s IN 0 TO summer_g-1 GENERATE
  begin
    g2: FOR h IN 0 TO harmonic_g-1 GENERATE
    begin
      -- HDL Embedded Text Block 1 eb1
      p : pwr_s(h)((s+1)*res_per_h_c(h)*32 - 1 downto s*res_per_h_c(h)*32) <=
        pwr_filt_s((s*last_column_c(harmonic_g-1)+first_res_c(h) + res_per_h_c(h))*32 - 1
          downto (s*last_column_c(harmonic_g-1)+first_res_c(h))*32);
      
      t : tc_s(h)((s+1)*res_per_h_c(h) - 1 downto s*res_per_h_c(h)) <=
        tc_filt_s(s*last_column_c(harmonic_g-1)+first_res_c(h) + res_per_h_c(h) -1
          downto s*last_column_c(harmonic_g-1) + first_res_c(h));
      
      r : row_s(h)((s+1)*7 -1 downto s*7) <=
        row_info_filt_s(s*harmonic_g*7 + h*7 + 6 downto s*harmonic_g*7 + h*7);

    end generate g2;

  end generate g1;

  hres: FOR h IN 0 TO harmonic_g-1 GENERATE
  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : hsumhres use entity hsum_lib.hsumhres;
  -- pragma synthesis_on

  begin
    -- Instantiate a hsumres component for each harmonic.
    hres_i : hsumhres
      generic map (
        summer_g       => summer_g,        -- Number of SUMMERs.
        harmonic_num_g => h                -- Harmonic number processed by this block.
      )
      port map (
        analysis_run => analysis_run,
        seed_col => seed_col_s,
        clear_results => clear_results,
        save_results => save_results,
        working_page => working_page_s,
        dm_count => dm_cnt_internal,
        results => results,
        exc => exc,
        clk_sys => clk_sys,
        rst_sys_n => rst_sys_n(0),
        clk_mc => clk_mc,
        row_info => row_s(h)(summer_g*7-1 downto 0),
        pwr => pwr_s(h)(summer_g*res_per_h_c(h)*32-1 downto 0),
        tc => tc_s(h)(summer_g*res_per_h_c(h)-1 downto 0),
        save_done => save_done_s(h),
        results_rd => results_rd_s(h),
        exc_rd => exc_rd_s(h)
      );
  end generate hres;

  -- Implicit buffered output assignments
  dm_cnt <= dm_cnt_internal;

end architecture scm;
