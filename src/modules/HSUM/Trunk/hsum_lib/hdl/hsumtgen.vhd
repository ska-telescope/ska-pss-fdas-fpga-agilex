----------------------------------------------------------------------------
-- Module Name:  hsumtgen
--
-- Source Path:  hsum_lib/hdl/hsumtgen.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 10:27:04 31/01/2024
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
----------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2024 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
library hsum_lib;
use hsum_lib.hsummci_pkg.all;

entity hsumtgen is
  generic( 
    summer_g        : natural range 1 to 3;
    adder_latency_g : natural range 1 to 7
  );
  port( 
    -- Control and configuration inputs.
    hsum_trigger  : in     std_logic;                               -- Triggers processing a new FOP.
    hsum_enable   : in     std_logic;                               -- Allows processing to be paused.
    a_set         : in     std_logic;                               -- Indicates number of analysis runs to perform.
    b_start_1     : in     std_logic_vector (21 downto 0);          -- FOP start column (run 1).
    b_stop_1      : in     std_logic_vector (21 downto 0);          -- FOP stop column (run 1).
    b_start_2     : in     std_logic_vector (21 downto 0);          -- FOP start column (run 2).
    b_stop_2      : in     std_logic_vector (21 downto 0);          -- FOP stop column (run 2).
    h_1           : in     std_logic_vector (3 downto 0);           -- Number of harmonics to process (run 1).
    h_2           : in     std_logic_vector (3 downto 0);           -- Number of harmonics to process (run 2).
    a_1           : in     vector_4_array_t (0 to summer_g-1);      -- Number of orbital acceleration ambiguity slopes to process (run 1).
    a_2           : in     vector_4_array_t (0 to summer_g-1);      -- Number of orbital acceleration ambiguity slopes to process (run 2).
    p_en_1        : in     vector_5_array_t (0 to summer_g-1);      -- Number of orbital acceleration values to process (run 1).
    p_en_2        : in     vector_5_array_t (0 to summer_g-1);      -- Number of orbital acceleration values to process (run 2).
    fop_row_1     : in     std_logic_vector (6 downto 0);           -- Number of FOP rows to read from DDR (run 1).
    fop_row_2     : in     std_logic_vector (6 downto 0);           -- Number of FOP rows to read from DDR (run 2).
    thresh_set    : in     std_logic_vector (21 downto 0);          -- Column at which to swap threshold sets.
    t_filter_en   : in     std_logic;                               -- Result filter enable.
    -- Selected configuration.
    h             : out    std_logic_vector (3 downto 0);           -- Number of harmonics to process for current run.
    a             : out    vector_4_array_t (0 to summer_g-1);      -- Number of orbital slopes for current run.
    p_en          : out    vector_5_array_t (0 to summer_g-1);      -- Number of orbital acceleration values for current run.
    fop_row       : out    std_logic_vector (6 downto 0);           -- Number of FOP rows to read from DDR for current run.
    -- Sub-block done signals.
    done_req      : in     std_logic;                               -- DDRIN has finished requesting FOP data.
    done_read     : in     std_logic;                               -- DDRIN has finished loading FOP data.
    done_sum      : in     std_logic_vector (summer_g-1 downto 0);  -- SUMMER has completed processing FOP.
    -- Control to DDRIN.
    new_col       : out    std_logic;                               -- Starts reading a new set of columns.
    ddrin_rd_page : out    std_logic_vector (1 downto 0);           -- RAM page to use when SUMMER is reading FOP data.
    seed_col_read : out    std_logic_vector (21 downto 0);          -- First column of a set to read.
    -- Control to SUMMER.
    new_sum       : out    std_logic;                               -- Starts a summing run.
    seed_col_sum  : out    std_logic_vector (21 downto 0);          -- First column of a set being summed.
    t_set         : out    std_logic;                               -- Threshold set to use.
    -- Control to DDRIN, SUMMER and TREP.
    analysis_run  : out    std_logic;                               -- Indicates run 1 or run 2.
    -- Control to/from TREP.
    clear_results : out    std_logic;                               -- Indicates to clear results at start of run.
    save_results  : out    std_logic;                               -- Indicates to store results at end of analysis run.
    save_done     : in     std_logic;                               -- Indicates saving of results is complete.
    triggered     : out    std_logic;                               -- Indicates rising edge on hsum_trigger input.
    -- Response to high level.
    hsum_done     : out    std_logic;                               -- Analysis run(s) complete.
    -- Clock and reset.
    clk_sys       : in     std_logic;
    rst_sys_n     : in     std_logic
  );

-- Declarations

end entity hsumtgen ;
