----------------------------------------------------------------------------
-- Module Name:  pcif
--
-- Source Path:  pcif_lib/hdl/pcif_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 13:17:02 28/03/2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2022 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library pcif_lib;

architecture scm of pcif is

  -- Architecture declarations

  -- Internal signal declarations


  -- Component Declarations
  component pcif_mcif
  port (
    clk_mc                   : in     std_logic ;
    clk_pcie                 : in     std_logic ;
    mcdataout                : in     std_logic_vector (31 downto 0);
    rst_mc_n                 : in     std_logic ;
    rst_pcie_n               : in     std_logic ;
    rxm_address              : in     std_logic_vector (21 downto 0);
    rxm_byte_enable          : in     std_logic_vector (3 downto 0);
    rxm_read                 : in     std_logic ;
    rxm_write                : in     std_logic ;
    rxm_write_data           : in     std_logic_vector (31 downto 0);
    mcaddr                   : out    std_logic_vector (21 downto 0);
    mccs                     : out    std_logic ;
    mcdatain                 : out    std_logic_vector (31 downto 0);
    mcrwn                    : out    std_logic ;
    rxm_read_data            : out    std_logic_vector (31 downto 0);
    rxm_read_data_valid      : out    std_logic ;
    rxm_response             : out    std_logic_vector (1 downto 0);
    rxm_wait_request         : out    std_logic ;
    rxm_write_response_valid : out    std_logic 
  );
  end component pcif_mcif;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : pcif_mcif use entity pcif_lib.pcif_mcif;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  mcif_1 : pcif_mcif
    port map (
      clk_mc                   => clk_mc,
      clk_pcie                 => clk_pcie,
      mcdataout                => mcdataout,
      rst_mc_n                 => rst_mc_n,
      rst_pcie_n               => rst_pcie_n,
      rxm_address              => rxm_address,
      rxm_byte_enable          => rxm_byte_enable,
      rxm_read                 => rxm_read,
      rxm_write                => rxm_write,
      rxm_write_data           => rxm_write_data,
      mcaddr                   => mcaddr,
      mccs                     => mccs,
      mcdatain                 => mcdatain,
      mcrwn                    => mcrwn,
      rxm_read_data            => rxm_read_data,
      rxm_read_data_valid      => rxm_read_data_vald,
      rxm_response             => rxm_response,
      rxm_wait_request         => rxm_wait_request,
      rxm_write_response_valid => rxm_write_response_valid
    );

end architecture scm;
