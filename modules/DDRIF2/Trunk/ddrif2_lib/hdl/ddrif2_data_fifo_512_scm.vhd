----------------------------------------------------------------------------
-- Module Name:  ddrif2_data_fifo_512
--
-- Source Path:  ddrif2_lib/hdl/ddrif2_data_fifo_512_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 10:08:14 25/01/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2023 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library ddrif2_lib;

architecture scm of ddrif2_data_fifo_512 is

  -- Architecture declarations

  -- Internal signal declarations


  -- Component Declarations
  component dual_port_ram_dual_clock
  generic (
    abits_g : integer;
    dbits_g : integer
  );
  port (
    aa    : in     std_logic_vector (abits_g-1 downto 0);
    aclk  : in     std_logic ;
    ai    : in     std_logic_vector (dbits_g-1 downto 0);
    awren : in     std_logic ;
    ba    : in     std_logic_vector (abits_g-1 downto 0);
    bclk  : in     std_logic ;
    bo    : out    std_logic_vector (dbits_g-1 downto 0)
  );
  end component dual_port_ram_dual_clock;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : dual_port_ram_dual_clock use entity ddrif2_lib.dual_port_ram_dual_clock;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  ram_1 : dual_port_ram_dual_clock
    generic map (
      abits_g => 9,
      dbits_g => 512
    )
    port map (
      aa    => waddr,
      aclk  => clk_ddr,
      ai    => ddr_data_in,
      awren => valid,
      ba    => raddr,
      bclk  => clk_out,
      bo    => ddr_data_out
    );

end architecture scm;
