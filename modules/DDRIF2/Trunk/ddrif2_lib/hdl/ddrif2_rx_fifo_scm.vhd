----------------------------------------------------------------------------
-- Module Name:  ddrif2_rx_fifo
--
-- Source Path:  ddrif2_lib/hdl/ddrif2_rx_fifo_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 10:08:14 25/01/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2023 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library ddrif2_lib;

architecture scm of ddrif2_rx_fifo is

  -- Architecture declarations

  -- Internal signal declarations
  signal ai : std_logic_vector(545 downto 0);
  signal bo : std_logic_vector(545 downto 0);


  -- Component Declarations
  component ddrif2_combine
  port (
    ddr_addr_in  : in     std_logic_vector (31 downto 0);
    ddr_data_in  : in     std_logic_vector (511 downto 0);
    ddr_read_in  : in     std_logic ;
    ddr_write_in : in     std_logic ;
    ai           : out    std_logic_vector (545 downto 0)
  );
  end component ddrif2_combine;
  component ddrif2_rx_ram_en
  port (
    bo            : in     std_logic_vector (545 downto 0);
    clk_ddr       : in     std_logic ;
    rst_ddr_n     : in     std_logic ;
    wait_req      : in     std_logic ;
    ddr_addr_out  : out    std_logic_vector (31 downto 0);
    ddr_data_out  : out    std_logic_vector (511 downto 0);
    ddr_read_out  : out    std_logic ;
    ddr_write_out : out    std_logic 
  );
  end component ddrif2_rx_ram_en;
  component dual_port_ram_dual_clock
  generic (
    abits_g : integer;
    dbits_g : integer
  );
  port (
    aa    : in     std_logic_vector (abits_g-1 downto 0);
    aclk  : in     std_logic ;
    ai    : in     std_logic_vector (dbits_g-1 downto 0);
    awren : in     std_logic ;
    ba    : in     std_logic_vector (abits_g-1 downto 0);
    bclk  : in     std_logic ;
    bo    : out    std_logic_vector (dbits_g-1 downto 0)
  );
  end component dual_port_ram_dual_clock;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : ddrif2_combine use entity ddrif2_lib.ddrif2_combine;
  for all : ddrif2_rx_ram_en use entity ddrif2_lib.ddrif2_rx_ram_en;
  for all : dual_port_ram_dual_clock use entity ddrif2_lib.dual_port_ram_dual_clock;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  combine_1 : ddrif2_combine
    port map (
      ddr_addr_in  => ddr_addr_in,
      ddr_data_in  => ddr_data_in,
      ddr_read_in  => ddr_read_in,
      ddr_write_in => ddr_write_in,
      ai           => ai
    );
  rx_ram_en_1 : ddrif2_rx_ram_en
    port map (
      bo            => bo,
      clk_ddr       => clk_ddr,
      rst_ddr_n     => rst_ddr_n,
      wait_req      => wait_req,
      ddr_addr_out  => ddr_addr_out,
      ddr_data_out  => ddr_data_out,
      ddr_read_out  => ddr_read_out,
      ddr_write_out => ddr_write_out
    );
  dual_port_ram_dual_clock_1 : dual_port_ram_dual_clock
    generic map (
      abits_g => 6,
      dbits_g => 546
    )
    port map (
      aa    => waddr,
      aclk  => clk_in,
      ai    => ai,
      awren => valid,
      ba    => raddr,
      bclk  => clk_ddr,
      bo    => bo
    );

end architecture scm;
