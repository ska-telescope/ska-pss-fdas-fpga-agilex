----------------------------------------------------------------------------
-- Module Name:  ddrif2
--
-- Source Path:  ddrif2_lib/hdl/ddrif2_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 16:35:59 13/06/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2023 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library ddrif2_lib;

architecture scm of ddrif2 is

  -- Architecture declarations

  -- Internal signal declarations
  signal amm_read_data_s            : std_logic_vector(511 downto 0);
  signal ddr_addr_pcie_s            : std_logic_vector(31 downto 0);
  signal ddr_addr_proc_s            : std_logic_vector(31 downto 0);
  signal ddr_addr_s                 : std_logic_vector(31 downto 0);
  signal ddr_data_pcie_s            : std_logic_vector(511 downto 0);
  signal ddr_data_proc_s            : std_logic_vector(511 downto 0);
  signal ddr_data_s                 : std_logic_vector(511 downto 0);
  signal ddr_read_pcie_s            : std_logic;
  signal ddr_read_proc_s            : std_logic;
  signal ddr_write_pcie_s           : std_logic;
  signal ddr_write_proc_s           : std_logic;
  signal fifo_full_tx_pcie_s        : std_logic;
  signal fifo_full_tx_proc_s        : std_logic;
  signal fifo_ready_rx_pcie_s       : std_logic;
  signal fifo_ready_rx_proc_s       : std_logic;
  signal pcie_amm_read_data_valid_s : std_logic;
  signal pcie_proc_sel_s            : std_logic;
  signal proc_amm_read_data_valid_s : std_logic;
  signal raddr_rx_pcie_s            : std_logic_vector(5 downto 0);
  signal raddr_rx_proc_s            : std_logic_vector(5 downto 0);
  signal raddr_tx_pcie_data_s       : std_logic_vector(8 downto 0);
  signal raddr_tx_proc_data_s       : std_logic_vector(8 downto 0);
  signal rcode_rx_pcie_s            : std_logic_vector(5 downto 0);
  signal rcode_rx_proc_s            : std_logic_vector(5 downto 0);
  signal read_addr_pcie_s           : std_logic_vector(31 downto 0);
  signal read_addr_proc_s           : std_logic_vector(31 downto 0);
  signal read_s                     : std_logic;
  signal read_write_sel_s           : std_logic;
  signal rx_addr_pcie_s             : std_logic_vector(31 downto 0);
  signal rx_addr_proc_s             : std_logic_vector(31 downto 0);
  signal rx_data_pcie_s             : std_logic_vector(511 downto 0);
  signal rx_data_proc_s             : std_logic_vector(511 downto 0);
  signal rx_pcie_req_s              : std_logic;
  signal rx_proc_req_s              : std_logic;
  signal rx_read_pcie_s             : std_logic;
  signal rx_read_proc_s             : std_logic;
  signal rx_write_pcie_s            : std_logic;
  signal rx_write_proc_s            : std_logic;
  signal tx_data_tx_pcie_s          : std_logic_vector(511 downto 0);
  signal tx_data_tx_proc_s          : std_logic_vector(511 downto 0);
  signal valid_data_tx_pcie_s       : std_logic;
  signal valid_data_tx_proc_s       : std_logic;
  signal valid_pcie_s               : std_logic;
  signal valid_proc_s               : std_logic;
  signal valid_read_pcie_s          : std_logic;
  signal valid_read_proc_s          : std_logic;
  signal valid_write_pcie_s         : std_logic;
  signal valid_write_proc_s         : std_logic;
  signal waddr_rx_pcie_s            : std_logic_vector(5 downto 0);
  signal waddr_rx_proc_s            : std_logic_vector(5 downto 0);
  signal waddr_tx_pcie_data_s       : std_logic_vector(8 downto 0);
  signal waddr_tx_proc_data_s       : std_logic_vector(8 downto 0);
  signal wait_req_s                 : std_logic;
  signal wcode_rx_pcie_s            : std_logic_vector(5 downto 0);
  signal wcode_rx_proc_s            : std_logic_vector(5 downto 0);
  signal wcode_tx_pcie_data_s       : std_logic_vector(8 downto 0);
  signal wcode_tx_proc_data_s       : std_logic_vector(8 downto 0);
  signal write_addr_pcie_s          : std_logic_vector(31 downto 0);
  signal write_addr_proc_s          : std_logic_vector(31 downto 0);
  signal write_data_pcie_s          : std_logic_vector(511 downto 0);
  signal write_data_proc_s          : std_logic_vector(511 downto 0);
  signal write_s                    : std_logic;


  -- Component Declarations
  component ddrif2_data_fifo_512
  port (
    clk_ddr      : in     std_logic ;
    clk_out      : in     std_logic ;
    ddr_data_in  : in     std_logic_vector (511 downto 0);
    raddr        : in     std_logic_vector (8 downto 0);
    valid        : in     std_logic ;
    waddr        : in     std_logic_vector (8 downto 0);
    ddr_data_out : out    std_logic_vector (511 downto 0)
  );
  end component ddrif2_data_fifo_512;
  component ddrif2_ddr_mux
  port (
    amm_read_data            : in     std_logic_vector (511 downto 0);
    amm_read_data_valid      : in     std_logic ;
    amm_wait_request         : in     std_logic ;
    clk_ddr                  : in     std_logic ;
    ddr_addr                 : in     std_logic_vector (31 downto 0);
    ddr_data                 : in     std_logic_vector (511 downto 0);
    pcie_proc_sel            : in     std_logic ;
    read                     : in     std_logic ;
    read_write_sel           : in     std_logic ;
    rst_ddr_n                : in     std_logic ;
    write                    : in     std_logic ;
    amm_address              : out    std_logic_vector (31 downto 0);
    amm_burstcount           : out    std_logic_vector (6 downto 0);
    amm_byte_en              : out    std_logic_vector (63 downto 0);
    amm_read                 : out    std_logic ;
    amm_read_data_out        : out    std_logic_vector (511 downto 0);
    amm_write                : out    std_logic ;
    amm_write_data           : out    std_logic_vector (511 downto 0);
    pcie_amm_read_data_valid : out    std_logic ;
    proc_amm_read_data_valid : out    std_logic ;
    wait_req                 : out    std_logic 
  );
  end component ddrif2_ddr_mux;
  component ddrif2_if_sel
  port (
    clk_ddr        : in     std_logic ;
    clk_pcie       : in     std_logic ;
    clk_sys        : in     std_logic ;
    ddr_rd_en      : in     std_logic ;
    ddr_wr_en      : in     std_logic ;
    rd_dma_write   : in     std_logic ;
    rst_ddr_n      : in     std_logic ;
    rst_pcie_n     : in     std_logic ;
    rst_sys_n      : in     std_logic ;
    wr_dma_read    : in     std_logic ;
    pcie_proc_sel  : out    std_logic ;
    read_write_sel : out    std_logic 
  );
  end component ddrif2_if_sel;
  component ddrif2_muxin
  port (
    read_address  : in     std_logic_vector (31 downto 0);
    valid_read    : in     std_logic ;
    valid_write   : in     std_logic ;
    write_address : in     std_logic_vector (31 downto 0);
    write_data    : in     std_logic_vector (511 downto 0);
    ddr_addr      : out    std_logic_vector (31 downto 0);
    ddr_data      : out    std_logic_vector (511 downto 0);
    ddr_read      : out    std_logic ;
    ddr_write     : out    std_logic ;
    valid         : out    std_logic 
  );
  end component ddrif2_muxin;
  component ddrif2_rag_in
  port (
    clk_ddr   : in     std_logic ;
    rst_ddr_n : in     std_logic ;
    wait_req  : in     std_logic ;
    wcode     : in     std_logic_vector (5 downto 0);
    raddr     : out    std_logic_vector (5 downto 0);
    rcode     : out    std_logic_vector (5 downto 0);
    req       : out    std_logic 
  );
  end component ddrif2_rag_in;
  component ddrif2_rag_out_3_512
  port (
    clk_sys         : in     std_logic ;
    data_avail_in_1 : in     std_logic ;
    data_avail_in_2 : in     std_logic ;
    rst_sys_n       : in     std_logic ;
    wcode           : in     std_logic_vector (8 downto 0);
    data_avail_out  : out    std_logic ;
    fifo_full       : out    std_logic ;
    fifo_full_out   : out    std_logic ;
    raddr           : out    std_logic_vector (8 downto 0);
    valid_data      : out    std_logic 
  );
  end component ddrif2_rag_out_3_512;
  component ddrif2_rag_out_512
  port (
    clk_sys    : in     std_logic ;
    rst_sys_n  : in     std_logic ;
    wcode      : in     std_logic_vector (8 downto 0);
    fifo_full  : out    std_logic ;
    raddr      : out    std_logic_vector (8 downto 0);
    valid_data : out    std_logic 
  );
  end component ddrif2_rag_out_512;
  component ddrif2_rx_fifo
  port (
    clk_ddr       : in     std_logic ;
    clk_in        : in     std_logic ;
    ddr_addr_in   : in     std_logic_vector (31 downto 0);
    ddr_data_in   : in     std_logic_vector (511 downto 0);
    ddr_read_in   : in     std_logic ;
    ddr_write_in  : in     std_logic ;
    raddr         : in     std_logic_vector (5 downto 0);
    rst_ddr_n     : in     std_logic ;
    valid         : in     std_logic ;
    waddr         : in     std_logic_vector (5 downto 0);
    wait_req      : in     std_logic ;
    ddr_addr_out  : out    std_logic_vector (31 downto 0);
    ddr_data_out  : out    std_logic_vector (511 downto 0);
    ddr_read_out  : out    std_logic ;
    ddr_write_out : out    std_logic 
  );
  end component ddrif2_rx_fifo;
  component ddrif2_rx_mux
  port (
    clk_ddr       : in     std_logic ;
    pcie_proc_sel : in     std_logic ;
    rst_ddr_n     : in     std_logic ;
    rx_addr_pcie  : in     std_logic_vector (31 downto 0);
    rx_addr_proc  : in     std_logic_vector (31 downto 0);
    rx_data_pcie  : in     std_logic_vector (511 downto 0);
    rx_data_proc  : in     std_logic_vector (511 downto 0);
    rx_pcie_req   : in     std_logic ;
    rx_proc_req   : in     std_logic ;
    rx_read_pcie  : in     std_logic ;
    rx_read_proc  : in     std_logic ;
    rx_write_pcie : in     std_logic ;
    rx_write_proc : in     std_logic ;
    wait_req      : in     std_logic ;
    ddr_addr_out  : out    std_logic_vector (31 downto 0);
    ddr_data_out  : out    std_logic_vector (511 downto 0);
    read_out      : out    std_logic ;
    write_out     : out    std_logic 
  );
  end component ddrif2_rx_mux;
  component ddrif2_rx_pcie_if
  port (
    clk_pcie            : in     std_logic ;
    fifo_ready          : in     std_logic ;
    rd_dma_address      : in     std_logic_vector (31 downto 0);
    rd_dma_burst_count  : in     std_logic_vector (3 downto 0);
    rd_dma_byte_en      : in     std_logic_vector (63 downto 0);
    rd_dma_write        : in     std_logic ;
    rd_dma_write_data   : in     std_logic_vector (511 downto 0);
    rst_pcie_n          : in     std_logic ;
    rd_dma_wait_request : out    std_logic ;
    rx_addr_pcie        : out    std_logic_vector (31 downto 0);
    rx_data_pcie        : out    std_logic_vector (511 downto 0);
    valid               : out    std_logic 
  );
  end component ddrif2_rx_pcie_if;
  component ddrif2_rx_proc_if
  port (
    clk_sys             : in     std_logic ;
    ddr_wr_addr         : in     std_logic_vector (31 downto 0);
    ddr_wr_data         : in     std_logic_vector (511 downto 0);
    ddr_wr_en           : in     std_logic ;
    fifo_ready          : in     std_logic ;
    fifo_ready_in_1     : in     std_logic ;
    fifo_ready_in_2     : in     std_logic ;
    rst_sys_n           : in     std_logic ;
    ddr_wr_wait_request : out    std_logic ;
    rx_addr_proc        : out    std_logic_vector (31 downto 0);
    rx_data_proc        : out    std_logic_vector (511 downto 0);
    valid               : out    std_logic 
  );
  end component ddrif2_rx_proc_if;
  component ddrif2_tx_pcie_if
  port (
    clk_pcie               : in     std_logic ;
    fifo_full              : in     std_logic ;
    fifo_ready             : in     std_logic ;
    rst_pcie_n             : in     std_logic ;
    tx_data                : in     std_logic_vector (511 downto 0);
    valid_data             : in     std_logic ;
    wr_dma_address         : in     std_logic_vector (31 downto 0);
    wr_dma_burst_count     : in     std_logic_vector (3 downto 0);
    wr_dma_read            : in     std_logic ;
    tx_addr_pcie           : out    std_logic_vector (31 downto 0);
    valid                  : out    std_logic ;
    wr_dma_read_data       : out    std_logic_vector (511 downto 0);
    wr_dma_read_data_valid : out    std_logic ;
    wr_dma_wait_request    : out    std_logic 
  );
  end component ddrif2_tx_pcie_if;
  component ddrif2_tx_proc_if
  port (
    clk_sys             : in     std_logic ;
    ddr_rd_addr         : in     std_logic_vector (31 downto 0);
    ddr_rd_en           : in     std_logic ;
    fifo_full           : in     std_logic ;
    fifo_full_in_1      : in     std_logic ;
    fifo_full_in_2      : in     std_logic ;
    fifo_ready          : in     std_logic ;
    fifo_ready_in_1     : in     std_logic ;
    fifo_ready_in_2     : in     std_logic ;
    rst_sys_n           : in     std_logic ;
    tx_data             : in     std_logic_vector (511 downto 0);
    valid_data          : in     std_logic ;
    ddr_rd_data         : out    std_logic_vector (511 downto 0);
    ddr_rd_data_valid   : out    std_logic ;
    ddr_rd_wait_request : out    std_logic ;
    tx_addr_proc        : out    std_logic_vector (31 downto 0);
    valid               : out    std_logic 
  );
  end component ddrif2_tx_proc_if;
  component ddrif2_wag_in
  port (
    clk            : in     std_logic ;
    rcode          : in     std_logic_vector (5 downto 0);
    resetn         : in     std_logic ;
    valid          : in     std_logic ;
    fifo_ready     : out    std_logic ;
    fifo_ready_out : out    std_logic ;
    waddr          : out    std_logic_vector (5 downto 0);
    wcode          : out    std_logic_vector (5 downto 0)
  );
  end component ddrif2_wag_in;
  component ddrif2_wag_out
  port (
    clk_ddr   : in     std_logic ;
    rst_ddr_n : in     std_logic ;
    valid     : in     std_logic ;
    waddr     : out    std_logic_vector (8 downto 0);
    wcode     : out    std_logic_vector (8 downto 0)
  );
  end component ddrif2_wag_out;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : ddrif2_data_fifo_512 use entity ddrif2_lib.ddrif2_data_fifo_512;
  for all : ddrif2_ddr_mux use entity ddrif2_lib.ddrif2_ddr_mux;
  for all : ddrif2_if_sel use entity ddrif2_lib.ddrif2_if_sel;
  for all : ddrif2_muxin use entity ddrif2_lib.ddrif2_muxin;
  for all : ddrif2_rag_in use entity ddrif2_lib.ddrif2_rag_in;
  for all : ddrif2_rag_out_3_512 use entity ddrif2_lib.ddrif2_rag_out_3_512;
  for all : ddrif2_rag_out_512 use entity ddrif2_lib.ddrif2_rag_out_512;
  for all : ddrif2_rx_fifo use entity ddrif2_lib.ddrif2_rx_fifo;
  for all : ddrif2_rx_mux use entity ddrif2_lib.ddrif2_rx_mux;
  for all : ddrif2_rx_pcie_if use entity ddrif2_lib.ddrif2_rx_pcie_if;
  for all : ddrif2_rx_proc_if use entity ddrif2_lib.ddrif2_rx_proc_if;
  for all : ddrif2_tx_pcie_if use entity ddrif2_lib.ddrif2_tx_pcie_if;
  for all : ddrif2_tx_proc_if use entity ddrif2_lib.ddrif2_tx_proc_if;
  for all : ddrif2_wag_in use entity ddrif2_lib.ddrif2_wag_in;
  for all : ddrif2_wag_out use entity ddrif2_lib.ddrif2_wag_out;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  data_fifo_512_1 : ddrif2_data_fifo_512
    port map (
      clk_ddr      => clk_ddr,
      clk_out      => clk_sys,
      ddr_data_in  => amm_read_data_s,
      raddr        => raddr_tx_proc_data_s,
      valid        => proc_amm_read_data_valid_s,
      waddr        => waddr_tx_proc_data_s,
      ddr_data_out => tx_data_tx_proc_s
    );
  data_fifo_512_2 : ddrif2_data_fifo_512
    port map (
      clk_ddr      => clk_ddr,
      clk_out      => clk_pcie,
      ddr_data_in  => amm_read_data_s,
      raddr        => raddr_tx_pcie_data_s,
      valid        => pcie_amm_read_data_valid_s,
      waddr        => waddr_tx_pcie_data_s,
      ddr_data_out => tx_data_tx_pcie_s
    );
  ddr_mux_1 : ddrif2_ddr_mux
    port map (
      amm_read_data            => amm_read_data,
      amm_read_data_valid      => amm_read_data_valid,
      amm_wait_request         => amm_wait_request,
      clk_ddr                  => clk_ddr,
      ddr_addr                 => ddr_addr_s,
      ddr_data                 => ddr_data_s,
      pcie_proc_sel            => pcie_proc_sel_s,
      read                     => read_s,
      read_write_sel           => read_write_sel_s,
      rst_ddr_n                => rst_ddr_n,
      write                    => write_s,
      amm_address              => amm_address,
      amm_burstcount           => amm_burstcount,
      amm_byte_en              => amm_byte_en,
      amm_read                 => amm_read,
      amm_read_data_out        => amm_read_data_s,
      amm_write                => amm_write,
      amm_write_data           => amm_write_data,
      pcie_amm_read_data_valid => pcie_amm_read_data_valid_s,
      proc_amm_read_data_valid => proc_amm_read_data_valid_s,
      wait_req                 => wait_req_s
    );
  if_sel_1 : ddrif2_if_sel
    port map (
      clk_ddr        => clk_ddr,
      clk_pcie       => clk_pcie,
      clk_sys        => clk_sys,
      ddr_rd_en      => ddr_rd_en,
      ddr_wr_en      => ddr_wr_en,
      rd_dma_write   => rd_dma_write,
      rst_ddr_n      => rst_ddr_n,
      rst_pcie_n     => rst_pcie_n,
      rst_sys_n      => rst_sys_n,
      wr_dma_read    => wr_dma_read,
      pcie_proc_sel  => pcie_proc_sel_s,
      read_write_sel => read_write_sel_s
    );
  muxin_1 : ddrif2_muxin
    port map (
      read_address  => read_addr_pcie_s,
      valid_read    => valid_read_pcie_s,
      valid_write   => valid_write_pcie_s,
      write_address => write_addr_pcie_s,
      write_data    => write_data_pcie_s,
      ddr_addr      => ddr_addr_pcie_s,
      ddr_data      => ddr_data_pcie_s,
      ddr_read      => ddr_read_pcie_s,
      ddr_write     => ddr_write_pcie_s,
      valid         => valid_pcie_s
    );
  muxin_2 : ddrif2_muxin
    port map (
      read_address  => read_addr_proc_s,
      valid_read    => valid_read_proc_s,
      valid_write   => valid_write_proc_s,
      write_address => write_addr_proc_s,
      write_data    => write_data_proc_s,
      ddr_addr      => ddr_addr_proc_s,
      ddr_data      => ddr_data_proc_s,
      ddr_read      => ddr_read_proc_s,
      ddr_write     => ddr_write_proc_s,
      valid         => valid_proc_s
    );
  rag_in_1 : ddrif2_rag_in
    port map (
      clk_ddr   => clk_ddr,
      rst_ddr_n => rst_ddr_n,
      wait_req  => wait_req_s,
      wcode     => wcode_rx_pcie_s,
      raddr     => raddr_rx_pcie_s,
      rcode     => rcode_rx_pcie_s,
      req       => rx_pcie_req_s
    );
  rag_in_2 : ddrif2_rag_in
    port map (
      clk_ddr   => clk_ddr,
      rst_ddr_n => rst_ddr_n,
      wait_req  => wait_req_s,
      wcode     => wcode_rx_proc_s,
      raddr     => raddr_rx_proc_s,
      rcode     => rcode_rx_proc_s,
      req       => rx_proc_req_s
    );
  rag_out_3_512_1 : ddrif2_rag_out_3_512
    port map (
      clk_sys         => clk_sys,
      data_avail_in_1 => data_avail_in_1,
      data_avail_in_2 => data_avail_in_2,
      rst_sys_n       => rst_sys_n,
      wcode           => wcode_tx_proc_data_s,
      data_avail_out  => data_avail_out,
      fifo_full       => fifo_full_tx_proc_s,
      fifo_full_out   => fifo_full_out,
      raddr           => raddr_tx_proc_data_s,
      valid_data      => valid_data_tx_proc_s
    );
  rag_out_512_2 : ddrif2_rag_out_512
    port map (
      clk_sys    => clk_pcie,
      rst_sys_n  => rst_pcie_n,
      wcode      => wcode_tx_pcie_data_s,
      fifo_full  => fifo_full_tx_pcie_s,
      raddr      => raddr_tx_pcie_data_s,
      valid_data => valid_data_tx_pcie_s
    );
  rx_fifo_1 : ddrif2_rx_fifo
    port map (
      clk_ddr       => clk_ddr,
      clk_in        => clk_pcie,
      ddr_addr_in   => ddr_addr_pcie_s,
      ddr_data_in   => ddr_data_pcie_s,
      ddr_read_in   => ddr_read_pcie_s,
      ddr_write_in  => ddr_write_pcie_s,
      raddr         => raddr_rx_pcie_s,
      rst_ddr_n     => rst_ddr_n,
      valid         => valid_pcie_s,
      waddr         => waddr_rx_pcie_s,
      wait_req      => wait_req_s,
      ddr_addr_out  => rx_addr_pcie_s,
      ddr_data_out  => rx_data_pcie_s,
      ddr_read_out  => rx_read_pcie_s,
      ddr_write_out => rx_write_pcie_s
    );
  rx_fifo_2 : ddrif2_rx_fifo
    port map (
      clk_ddr       => clk_ddr,
      clk_in        => clk_sys,
      ddr_addr_in   => ddr_addr_proc_s,
      ddr_data_in   => ddr_data_proc_s,
      ddr_read_in   => ddr_read_proc_s,
      ddr_write_in  => ddr_write_proc_s,
      raddr         => raddr_rx_proc_s,
      rst_ddr_n     => rst_ddr_n,
      valid         => valid_proc_s,
      waddr         => waddr_rx_proc_s,
      wait_req      => wait_req_s,
      ddr_addr_out  => rx_addr_proc_s,
      ddr_data_out  => rx_data_proc_s,
      ddr_read_out  => rx_read_proc_s,
      ddr_write_out => rx_write_proc_s
    );
  rx_mux_1 : ddrif2_rx_mux
    port map (
      clk_ddr       => clk_ddr,
      pcie_proc_sel => pcie_proc_sel_s,
      rst_ddr_n     => rst_ddr_n,
      rx_addr_pcie  => rx_addr_pcie_s,
      rx_addr_proc  => rx_addr_proc_s,
      rx_data_pcie  => rx_data_pcie_s,
      rx_data_proc  => rx_data_proc_s,
      rx_pcie_req   => rx_pcie_req_s,
      rx_proc_req   => rx_proc_req_s,
      rx_read_pcie  => rx_read_pcie_s,
      rx_read_proc  => rx_read_proc_s,
      rx_write_pcie => rx_write_pcie_s,
      rx_write_proc => rx_write_proc_s,
      wait_req      => wait_req_s,
      ddr_addr_out  => ddr_addr_s,
      ddr_data_out  => ddr_data_s,
      read_out      => read_s,
      write_out     => write_s
    );
  rx_pcie_if_1 : ddrif2_rx_pcie_if
    port map (
      clk_pcie            => clk_pcie,
      fifo_ready          => fifo_ready_rx_pcie_s,
      rd_dma_address      => rd_dma_address,
      rd_dma_burst_count  => rd_dma_burst_count,
      rd_dma_byte_en      => rd_dma_byte_en,
      rd_dma_write        => rd_dma_write,
      rd_dma_write_data   => rd_dma_write_data,
      rst_pcie_n          => rst_pcie_n,
      rd_dma_wait_request => rd_dma_wait_request,
      rx_addr_pcie        => write_addr_pcie_s,
      rx_data_pcie        => write_data_pcie_s,
      valid               => valid_write_pcie_s
    );
  rx_proc_if_1 : ddrif2_rx_proc_if
    port map (
      clk_sys             => clk_sys,
      ddr_wr_addr         => ddr_wr_addr,
      ddr_wr_data         => ddr_wr_data,
      ddr_wr_en           => ddr_wr_en,
      fifo_ready          => fifo_ready_rx_proc_s,
      fifo_ready_in_1     => fifo_ready_in_1,
      fifo_ready_in_2     => fifo_ready_in_2,
      rst_sys_n           => rst_sys_n,
      ddr_wr_wait_request => ddr_wr_wait_request,
      rx_addr_proc        => write_addr_proc_s,
      rx_data_proc        => write_data_proc_s,
      valid               => valid_write_proc_s
    );
  tx_pcie_if_1 : ddrif2_tx_pcie_if
    port map (
      clk_pcie               => clk_pcie,
      fifo_full              => fifo_full_tx_pcie_s,
      fifo_ready             => fifo_ready_rx_pcie_s,
      rst_pcie_n             => rst_pcie_n,
      tx_data                => tx_data_tx_pcie_s,
      valid_data             => valid_data_tx_pcie_s,
      wr_dma_address         => wr_dma_address,
      wr_dma_burst_count     => wr_dma_burst_count,
      wr_dma_read            => wr_dma_read,
      tx_addr_pcie           => read_addr_pcie_s,
      valid                  => valid_read_pcie_s,
      wr_dma_read_data       => wr_dma_read_data,
      wr_dma_read_data_valid => wr_dma_read_data_valid,
      wr_dma_wait_request    => wr_dma_wait_request
    );
  tx_proc_if_1 : ddrif2_tx_proc_if
    port map (
      clk_sys             => clk_sys,
      ddr_rd_addr         => ddr_rd_addr,
      ddr_rd_en           => ddr_rd_en,
      fifo_full           => fifo_full_tx_proc_s,
      fifo_full_in_1      => fifo_full_in_1,
      fifo_full_in_2      => fifo_full_in_2,
      fifo_ready          => fifo_ready_rx_proc_s,
      fifo_ready_in_1     => fifo_ready_in_1,
      fifo_ready_in_2     => fifo_ready_in_2,
      rst_sys_n           => rst_sys_n,
      tx_data             => tx_data_tx_proc_s,
      valid_data          => valid_data_tx_proc_s,
      ddr_rd_data         => ddr_rd_data,
      ddr_rd_data_valid   => ddr_rd_data_valid,
      ddr_rd_wait_request => ddr_rd_wait_request,
      tx_addr_proc        => read_addr_proc_s,
      valid               => valid_read_proc_s
    );
  wag_in_1 : ddrif2_wag_in
    port map (
      clk            => clk_pcie,
      rcode          => rcode_rx_pcie_s,
      resetn         => rst_pcie_n,
      valid          => valid_pcie_s,
      fifo_ready     => fifo_ready_rx_pcie_s,
      fifo_ready_out => open,
      waddr          => waddr_rx_pcie_s,
      wcode          => wcode_rx_pcie_s
    );
  wag_in_2 : ddrif2_wag_in
    port map (
      clk            => clk_sys,
      rcode          => rcode_rx_proc_s,
      resetn         => rst_sys_n,
      valid          => valid_proc_s,
      fifo_ready     => fifo_ready_rx_proc_s,
      fifo_ready_out => fifo_ready_out,
      waddr          => waddr_rx_proc_s,
      wcode          => wcode_rx_proc_s
    );
  wag_out_1 : ddrif2_wag_out
    port map (
      clk_ddr   => clk_ddr,
      rst_ddr_n => rst_ddr_n,
      valid     => proc_amm_read_data_valid_s,
      waddr     => waddr_tx_proc_data_s,
      wcode     => wcode_tx_proc_data_s
    );
  wag_out_2 : ddrif2_wag_out
    port map (
      clk_ddr   => clk_ddr,
      rst_ddr_n => rst_ddr_n,
      valid     => pcie_amm_read_data_valid_s,
      waddr     => waddr_tx_pcie_data_s,
      wcode     => wcode_tx_pcie_data_s
    );

end architecture scm;
