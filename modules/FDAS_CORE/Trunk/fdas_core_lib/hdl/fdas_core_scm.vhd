----------------------------------------------------------------------------
-- Module Name:  fdas_core
--
-- Source Path:  fdas_core_lib/hdl/fdas_core_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 15:17:40 15/09/2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2023 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library ddrif2_lib;
library cld_lib;
library conv_lib;
library mci_top_lib;
library pcif_lib;
library ctrl_lib;

library fdas_core_lib;

architecture scm of fdas_core is

  -- Architecture declarations

  -- Internal signal declarations
  signal data_avail_out_2_s        : std_logic;
  signal data_avail_out_3_s        : std_logic;
  signal ddr0_rd_addr_s            : std_logic_vector(31 downto 0);
  signal ddr0_rd_data_s            : std_logic_vector(511 downto 0);
  signal ddr0_rd_en_s              : std_logic;
  signal ddr0_rd_valid_s           : std_logic;
  signal ddr0_rd_waitreq_s         : std_logic;
  signal ddr23_rd_addr_s           : std_logic_vector(31 downto 0);
  signal ddr23_rd_data_s           : std_logic_vector(1023 downto 0);
  signal ddr23_rd_en_s             : std_logic;
  signal ddr23_rd_valid_s          : std_logic;
  signal ddr23_rd_waitreq_s        : std_logic;
  signal ddr23_wr_addr_s           : std_logic_vector(31 downto 0);
  signal ddr23_wr_data_s           : std_logic_vector(1023 downto 0);
  signal ddr23_wr_en_s             : std_logic;
  signal ddr23_wr_waitreq_s        : std_logic;
  signal fifo_full_out_2_s         : std_logic;
  signal fifo_full_out_3_s         : std_logic;
  signal fifo_ready_out_2_s        : std_logic;
  signal fifo_ready_out_3_s        : std_logic;
  signal mcaddr_s                  : std_logic_vector(21 downto 0);
  signal mccs_s                    : std_logic;
  signal mcdata_s                  : std_logic_vector(31 downto 0);
  signal mcdataout_pcif_s          : std_logic_vector(31 downto 0);
  signal mcrwn_s                   : std_logic;
  signal rst_core_pcie_n_s         : std_logic;
  signal rst_core_pcie_sync_n_s    : std_logic;
  signal rst_ddrif_0_ddr_n_s       : std_logic;
  signal rst_ddrif_0_n_s           : std_logic;
  signal rst_ddrif_0_pcie_n_s      : std_logic;
  signal rst_ddrif_0_pcie_sync_n_s : std_logic;
  signal rst_ddrif_0_sys_n_s       : std_logic;
  signal rst_ddrif_2_ddr_n_s       : std_logic;
  signal rst_ddrif_2_n_s           : std_logic;
  signal rst_ddrif_2_pcie_n_s      : std_logic;
  signal rst_ddrif_2_pcie_sync_n_s : std_logic;
  signal rst_ddrif_2_sys_n_s       : std_logic;
  signal rst_ddrif_3_ddr_n_s       : std_logic;
  signal rst_ddrif_3_n_s           : std_logic;
  signal rst_ddrif_3_pcie_n_s      : std_logic;
  signal rst_ddrif_3_pcie_sync_n_s : std_logic;
  signal rst_ddrif_3_sys_n_s       : std_logic;
  signal rst_pcie_n_s              : std_logic;


  -- Component Declarations
  component ddrif2
  port (
    amm_read_data          : in     std_logic_vector (511 downto 0);
    amm_read_data_valid    : in     std_logic ;
    amm_wait_request       : in     std_logic ;
    clk_ddr                : in     std_logic ;
    clk_pcie               : in     std_logic ;
    clk_sys                : in     std_logic ;
    data_avail_in_1        : in     std_logic ;
    data_avail_in_2        : in     std_logic ;
    ddr_rd_addr            : in     std_logic_vector (31 downto 0);
    ddr_rd_en              : in     std_logic ;
    ddr_wr_addr            : in     std_logic_vector (31 downto 0);
    ddr_wr_data            : in     std_logic_vector (511 downto 0);
    ddr_wr_en              : in     std_logic ;
    fifo_full_in_1         : in     std_logic ;
    fifo_full_in_2         : in     std_logic ;
    fifo_ready_in_1        : in     std_logic ;
    fifo_ready_in_2        : in     std_logic ;
    rd_dma_address         : in     std_logic_vector (31 downto 0);
    rd_dma_burst_count     : in     std_logic_vector (3 downto 0);
    rd_dma_byte_en         : in     std_logic_vector (63 downto 0);
    rd_dma_write           : in     std_logic ;
    rd_dma_write_data      : in     std_logic_vector (511 downto 0);
    rst_ddr_n              : in     std_logic ;
    rst_pcie_n             : in     std_logic ;
    rst_sys_n              : in     std_logic ;
    wr_dma_address         : in     std_logic_vector (31 downto 0);
    wr_dma_burst_count     : in     std_logic_vector (3 downto 0);
    wr_dma_read            : in     std_logic ;
    amm_address            : out    std_logic_vector (31 downto 0);
    amm_burstcount         : out    std_logic_vector (6 downto 0);
    amm_byte_en            : out    std_logic_vector (63 downto 0);
    amm_read               : out    std_logic ;
    amm_write              : out    std_logic ;
    amm_write_data         : out    std_logic_vector (511 downto 0);
    data_avail_out         : out    std_logic ;
    ddr_rd_data            : out    std_logic_vector (511 downto 0);
    ddr_rd_data_valid      : out    std_logic ;
    ddr_rd_wait_request    : out    std_logic ;
    ddr_wr_wait_request    : out    std_logic ;
    fifo_full_out          : out    std_logic ;
    fifo_ready_out         : out    std_logic ;
    rd_dma_wait_request    : out    std_logic ;
    wr_dma_read_data       : out    std_logic_vector (511 downto 0);
    wr_dma_read_data_valid : out    std_logic ;
    wr_dma_wait_request    : out    std_logic 
  );
  end component ddrif2;
  component core_reconf
  generic (
    ddr_g             : natural;
    fft_abits_g       : natural;
    fft_g             : natural;
    ifft_g            : natural;
    ifft_loop_bits_g  : natural;
    ifft_loop_g       : natural;
    summer_g          : natural;
    harmonic_g        : natural;
    product_id_g      : natural;
    version_number_g  : natural;
    revision_number_g : natural;
    res_pages_g       : natural
  );
  port (
    CLK_SYS              : in     std_logic ;
    CLK_MC               : in     std_logic ;
    RST_MC_N             : in     std_logic ;
    RST_GLOBAL_N         : in     std_logic ;
    CLK_PCIE             : in     std_logic ;
    RST_PCIE_N           : in     std_logic ;
    mcaddr               : in     std_logic_vector (21 downto 0);
    mcdata               : in     std_logic_vector (31 downto 0);
    mcrwn                : in     std_logic ;
    mccs                 : in     std_logic ;
    mcdataout            : out    std_logic_vector (31 downto 0);
    ddr0_rd_waitreq      : in     std_logic ;
    ddr0_rd_data         : in     std_logic_vector (511  downto 0);
    ddr0_rd_valid        : in     std_logic ;
    ddr0_rd_addr         : out    std_logic_vector (31 downto 0);
    ddr0_rd_en           : out    std_logic ;
    ddr1_wr_waitreq      : in     std_logic ;
    ddr1_wr_data         : out    std_logic_vector (ddr_g*512-1 downto 0);
    ddr1_wr_addr         : out    std_logic_vector (25 downto 0);
    ddr1_wr_en           : out    std_logic ;
    ddr1_rd_waitreq      : in     std_logic ;
    ddr1_rd_data         : in     std_logic_vector (512*ddr_g-1 downto 0);
    ddr1_rd_valid        : in     std_logic ;
    ddr1_rd_addr         : out    std_logic_vector (31 downto 0);
    ddr1_rd_en           : out    std_logic ;
    ddr_1_cal_fail       : in     std_logic ;
    ddr_0_cal_pass       : in     std_logic ;
    ddr_1_cal_pass       : in     std_logic ;
    ddr_0_cal_fail       : in     std_logic ;
    ddrif_0_resetn       : out    std_logic ;
    ddrif_1_resetn       : out    std_logic ;
    ddrif_pcie_resetn    : out    std_logic ;
    ddr_1_rst_n          : out    std_logic ;
    top_version          : in     std_logic_vector (15 downto 0);
    top_revision         : in     std_logic_vector (15 downto 0);
    ddr_0_reset_done     : in     std_logic ;
    ddr_1_reset_done     : in     std_logic ;
    ddr_0_rst_n          : out    std_logic ;
    USR_EVENT_MSIX_DATA  : out    std_logic_vector (15 downto 0);
    USR_EVENT_MSIX_VALID : out    std_logic ;
    USR_EVENT_MSIX_READY : in     std_logic ;
    ddr_2_cal_fail       : in     std_logic ;
    ddr_2_cal_pass       : in     std_logic ;
    ddr_3_cal_fail       : in     std_logic ;
    ddr_3_cal_pass       : in     std_logic ;
    ddr_2_reset_done     : in     std_logic ;
    ddr_3_reset_done     : in     std_logic ;
    ddrif_2_resetn       : out    std_logic ;
    ddrif_3_resetn       : out    std_logic ;
    ddr_2_rst_n          : out    std_logic ;
    ddr_3_rst_n          : out    std_logic 
  );
  end component core_reconf;
  component reset_sync
  port (
    RST_N     : in     std_logic ;
    CLK       : in     std_logic ;
    RST_OUT_N : out    std_logic 
  );
  end component reset_sync;
  component pcif
  port (
    clk_mc                   : in     std_logic ;
    clk_pcie                 : in     std_logic ;
    mcdataout                : in     std_logic_vector (31 downto 0);
    rst_mc_n                 : in     std_logic ;
    rst_pcie_n               : in     std_logic ;
    rxm_address              : in     std_logic_vector (21 downto 0);
    rxm_byte_enable          : in     std_logic_vector (3 downto 0);
    rxm_read                 : in     std_logic ;
    rxm_write                : in     std_logic ;
    rxm_write_data           : in     std_logic_vector (31 downto 0);
    mcaddr                   : out    std_logic_vector (21 downto 0);
    mccs                     : out    std_logic ;
    mcdatain                 : out    std_logic_vector (31 downto 0);
    mcrwn                    : out    std_logic ;
    rxm_read_data            : out    std_logic_vector (31 downto 0);
    rxm_read_data_vald       : out    std_logic ;
    rxm_response             : out    std_logic_vector (1 downto 0);
    rxm_wait_request         : out    std_logic ;
    rxm_write_response_valid : out    std_logic 
  );
  end component pcif;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : core_reconf use entity fdas_core_lib.core_reconf;
  for all : ddrif2 use entity ddrif2_lib.ddrif2;
  for all : pcif use entity pcif_lib.pcif;
  for all : reset_sync use entity fdas_core_lib.reset_sync;
  -- pragma synthesis_on


begin
  -- Architecture concurrent statements
  -- HDL Embedded Text Block 4 eb4
  -- Combine PCIE macro reset with MCI reset.
  gen_pcie_rst_0 : rst_ddrif_0_pcie_n_s <= RST_PCIE_N and rst_ddrif_0_pcie_sync_n_s;

  -- HDL Embedded Text Block 5 eb5
  -- Combine PCIE macro reset with MCI reset.
  gen_pcie_rst_2 : rst_ddrif_2_pcie_n_s <= RST_PCIE_N and rst_ddrif_2_pcie_sync_n_s;

  -- HDL Embedded Text Block 6 eb6
  -- eb6 6
  ddr23_wr_addr_s(5 downto 0) <= (others => '0');                                        

  -- HDL Embedded Text Block 7 eb7
  -- Combine PCIE macro reset with MCI reset.
  gen_pcie_rst_3 : rst_ddrif_3_pcie_n_s <= RST_PCIE_N and rst_ddrif_3_pcie_sync_n_s;

  -- HDL Embedded Text Block 8 eb8
  -- Combine PCIE macro reset with MCI reset.
  gen_pcie_rst_4 : rst_core_pcie_n_s <= RST_PCIE_N and rst_core_pcie_sync_n_s;


  -- Instance port mappings.
  ddrif2_0 : ddrif2
    port map (
      amm_read_data => AMM_READ_DATA0,
      amm_read_data_valid => AMM_READ_DATA_VALID0,
      amm_wait_request => AMM_WAIT_REQUEST0,
      clk_ddr => CLK_DDR0,
      clk_pcie => CLK_PCIE,
      clk_sys => CLK_SYS,
      ddr_rd_addr => ddr0_rd_addr_s,
      ddr_rd_en => ddr0_rd_en_s,
      rd_dma_address => RD_DMA_0_ADDRESS,
      rd_dma_burst_count => RD_DMA_0_BURST_COUNT,
      rd_dma_byte_en => RD_DMA_0_BYTE_EN,
      rd_dma_write => RD_DMA_0_WRITE,
      rd_dma_write_data => RD_DMA_0_WRITE_DATA,
      rst_ddr_n => rst_ddrif_0_ddr_n_s,
      rst_pcie_n => rst_ddrif_0_pcie_n_s,
      rst_sys_n => rst_ddrif_0_sys_n_s,
      wr_dma_address => WR_DMA_0_ADDRESS,
      wr_dma_burst_count => WR_DMA_0_BURST_COUNT,
      wr_dma_read => WR_DMA_0_READ,
      amm_address => AMM_ADDRESS0,
      amm_burstcount => AMM_BURSTCOUNT0,
      amm_byte_en => AMM_BYTE_EN0,
      amm_read => AMM_READ0,
      amm_write => AMM_WRITE0,
      amm_write_data => AMM_WRITE_DATA0,
      ddr_rd_data => ddr0_rd_data_s,
      ddr_rd_data_valid => ddr0_rd_valid_s,
      ddr_rd_wait_request => ddr0_rd_waitreq_s,
      rd_dma_wait_request => RD_DMA_0_WAIT_REQUEST,
      wr_dma_read_data => WR_DMA_0_READ_DATA,
      wr_dma_read_data_valid => WR_DMA_0_READ_DATA_VALID,
      wr_dma_wait_request => WR_DMA_0_WAIT_REQUEST,
      data_avail_in_1 => '1',
      data_avail_in_2 => '1',
      ddr_wr_addr => (others => '0'),
      ddr_wr_data => (others => '0'),
      ddr_wr_en => '0',
      fifo_full_in_1 => '0',
      fifo_full_in_2 => '0',
      fifo_ready_in_1 => '1',
      fifo_ready_in_2 => '1',
      data_avail_out => open,
      ddr_wr_wait_request => open,
      fifo_full_out => open,
      fifo_ready_out => open
    );
  ddrif2_2 : ddrif2
    port map (
      amm_read_data => AMM_READ_DATA2,
      amm_read_data_valid => AMM_READ_DATA_VALID2,
      amm_wait_request => AMM_WAIT_REQUEST2,
      clk_ddr => CLK_DDR2,
      clk_pcie => CLK_PCIE,
      clk_sys => CLK_SYS,
      data_avail_in_1 => data_avail_out_3_s,
      ddr_rd_addr => ddr23_rd_addr_s,
      ddr_rd_en => ddr23_rd_en_s,
      ddr_wr_addr => ddr23_wr_addr_s,
      ddr_wr_data => ddr23_wr_data_s(511 DOWNTO 0),
      ddr_wr_en => ddr23_wr_en_s,
      fifo_full_in_1 => fifo_full_out_3_s,
      fifo_ready_in_1 => fifo_ready_out_3_s,
      rd_dma_address => RD_DMA_2_ADDRESS,
      rd_dma_burst_count => RD_DMA_2_BURST_COUNT,
      rd_dma_byte_en => RD_DMA_2_BYTE_EN,
      rd_dma_write => RD_DMA_2_WRITE,
      rd_dma_write_data => RD_DMA_2_WRITE_DATA,
      rst_ddr_n => rst_ddrif_2_ddr_n_s,
      rst_pcie_n => rst_ddrif_2_pcie_n_s,
      rst_sys_n => rst_ddrif_2_sys_n_s,
      wr_dma_address => WR_DMA_2_ADDRESS,
      wr_dma_burst_count => WR_DMA_2_BURST_COUNT,
      wr_dma_read => WR_DMA_2_READ,
      amm_address => AMM_ADDRESS2,
      amm_burstcount => AMM_BURSTCOUNT2,
      amm_byte_en => AMM_BYTE_EN2,
      amm_read => AMM_READ2,
      amm_write => AMM_WRITE2,
      amm_write_data => AMM_WRITE_DATA2,
      data_avail_out => data_avail_out_2_s,
      ddr_rd_data => ddr23_rd_data_s(511 DOWNTO 0),
      fifo_full_out => fifo_full_out_2_s,
      fifo_ready_out => fifo_ready_out_2_s,
      rd_dma_wait_request => RD_DMA_2_WAIT_REQUEST,
      wr_dma_read_data => WR_DMA_2_READ_DATA,
      wr_dma_read_data_valid => WR_DMA_2_READ_DATA_VALID,
      wr_dma_wait_request => WR_DMA_2_WAIT_REQUEST,
      data_avail_in_2 => '1',
      fifo_full_in_2 => '0',
      fifo_ready_in_2 => '1',
      ddr_rd_data_valid => open,
      ddr_rd_wait_request => open,
      ddr_wr_wait_request => open
    );
  ddrif2_3 : ddrif2
    port map (
      amm_read_data => AMM_READ_DATA3,
      amm_read_data_valid => AMM_READ_DATA_VALID3,
      amm_wait_request => AMM_WAIT_REQUEST3,
      clk_ddr => CLK_DDR3,
      clk_pcie => CLK_PCIE,
      clk_sys => CLK_SYS,
      data_avail_in_1 => data_avail_out_2_s,
      ddr_rd_addr => ddr23_rd_addr_s,
      ddr_rd_en => ddr23_rd_en_s,
      ddr_wr_addr => ddr23_wr_addr_s,
      ddr_wr_data => ddr23_wr_data_s(1023 DOWNTO 512),
      ddr_wr_en => ddr23_wr_en_s,
      fifo_full_in_1 => fifo_full_out_2_s,
      fifo_ready_in_1 => fifo_ready_out_2_s,
      rd_dma_address => RD_DMA_3_ADDRESS,
      rd_dma_burst_count => RD_DMA_3_BURST_COUNT,
      rd_dma_byte_en => RD_DMA_3_BYTE_EN,
      rd_dma_write => RD_DMA_3_WRITE,
      rd_dma_write_data => RD_DMA_3_WRITE_DATA,
      rst_ddr_n => rst_ddrif_3_ddr_n_s,
      rst_pcie_n => rst_ddrif_3_pcie_n_s,
      rst_sys_n => rst_ddrif_3_sys_n_s,
      wr_dma_address => WR_DMA_3_ADDRESS,
      wr_dma_burst_count => WR_DMA_3_BURST_COUNT,
      wr_dma_read => WR_DMA_3_READ,
      amm_address => AMM_ADDRESS3,
      amm_burstcount => AMM_BURSTCOUNT3,
      amm_byte_en => AMM_BYTE_EN3,
      amm_read => AMM_READ3,
      amm_write => AMM_WRITE3,
      amm_write_data => AMM_WRITE_DATA3,
      data_avail_out => data_avail_out_3_s,
      ddr_rd_data => ddr23_rd_data_s(1023 DOWNTO 512),
      ddr_rd_data_valid => ddr23_rd_valid_s,
      ddr_rd_wait_request => ddr23_rd_waitreq_s,
      ddr_wr_wait_request => ddr23_wr_waitreq_s,
      fifo_full_out => fifo_full_out_3_s,
      fifo_ready_out => fifo_ready_out_3_s,
      rd_dma_wait_request => RD_DMA_3_WAIT_REQUEST,
      wr_dma_read_data => WR_DMA_3_READ_DATA,
      wr_dma_read_data_valid => WR_DMA_3_READ_DATA_VALID,
      wr_dma_wait_request => WR_DMA_3_WAIT_REQUEST,
      data_avail_in_2 => '1',
      fifo_full_in_2 => '0',
      fifo_ready_in_2 => '1'
    );
  core_reconf_i : core_reconf
    generic map (
      ddr_g             => ddr_g,
      fft_abits_g       => fft_abits_g,
      fft_g             => fft_g,
      ifft_g            => ifft_g,
      ifft_loop_bits_g  => ifft_loop_bits_g,
      ifft_loop_g       => ifft_loop_g,
      summer_g          => summer_g,
      harmonic_g        => harmonic_g,
      product_id_g      => product_id_g,
      version_number_g  => version_number_g,
      revision_number_g => revision_number_g,
      res_pages_g       => res_pages_g
    )
    port map (
      CLK_SYS              => CLK_SYS,
      CLK_MC               => CLK_MC,
      RST_MC_N             => RST_MC_N,
      RST_GLOBAL_N         => RST_GLOBAL_N,
      CLK_PCIE             => CLK_PCIE,
      RST_PCIE_N           => rst_core_pcie_n_s,
      mcaddr               => mcaddr_s,
      mcdata               => mcdata_s,
      mcrwn                => mcrwn_s,
      mccs                 => mccs_s,
      mcdataout            => mcdataout_pcif_s,
      ddr0_rd_waitreq      => ddr0_rd_waitreq_s,
      ddr0_rd_data         => ddr0_rd_data_s,
      ddr0_rd_valid        => ddr0_rd_valid_s,
      ddr0_rd_addr         => ddr0_rd_addr_s,
      ddr0_rd_en           => ddr0_rd_en_s,
      ddr1_wr_waitreq      => ddr23_wr_waitreq_s,
      ddr1_wr_data         => ddr23_wr_data_s,
      ddr1_wr_addr         => ddr23_wr_addr_s(31 downto 6),
      ddr1_wr_en           => ddr23_wr_en_s,
      ddr1_rd_waitreq      => ddr23_rd_waitreq_s,
      ddr1_rd_data         => ddr23_rd_data_s,
      ddr1_rd_valid        => ddr23_rd_valid_s,
      ddr1_rd_addr         => ddr23_rd_addr_s,
      ddr1_rd_en           => ddr23_rd_en_s,
      ddr_1_cal_fail       => DDR_1_CAL_FAIL,
      ddr_0_cal_pass       => DDR_0_CAL_PASS,
      ddr_1_cal_pass       => DDR_1_CAL_PASS,
      ddr_0_cal_fail       => DDR_0_CAL_FAIL,
      ddrif_0_resetn       => rst_ddrif_0_n_s,
      ddrif_1_resetn       => open,
      ddrif_pcie_resetn    => rst_pcie_n_s,
      ddr_1_rst_n          => DDR_1_RST_N,
      top_version          => TOP_VERSION,
      top_revision         => TOP_REVISION,
      ddr_0_reset_done     => DDR_0_RESET_DONE,
      ddr_1_reset_done     => DDR_1_RESET_DONE,
      ddr_0_rst_n          => DDR_0_RST_N,
      USR_EVENT_MSIX_DATA  => USR_EVENT_MSIX_DATA,
      USR_EVENT_MSIX_VALID => USR_EVENT_MSIX_VALID,
      USR_EVENT_MSIX_READY => USR_EVENT_MSIX_READY,
      ddr_2_cal_fail       => DDR_2_CAL_FAIL,
      ddr_2_cal_pass       => DDR_2_CAL_PASS,
      ddr_3_cal_fail       => DDR_3_CAL_FAIL,
      ddr_3_cal_pass       => DDR_3_CAL_PASS,
      ddr_2_reset_done     => DDR_2_RESET_DONE,
      ddr_3_reset_done     => DDR_3_RESET_DONE,
      ddrif_2_resetn       => rst_ddrif_2_n_s,
      ddrif_3_resetn       => rst_ddrif_3_n_s,
      ddr_2_rst_n          => DDR_2_RST_N,
      ddr_3_rst_n          => DDR_3_RST_N
    );
  rst_core_pcie : reset_sync
    port map (
      RST_N     => rst_pcie_n_s,
      CLK       => CLK_PCIE,
      RST_OUT_N => rst_core_pcie_sync_n_s
    );
  rst_ddrif_0_ddr : reset_sync
    port map (
      RST_N     => rst_ddrif_0_n_s,
      CLK       => CLK_DDR0,
      RST_OUT_N => rst_ddrif_0_ddr_n_s
    );
  rst_ddrif_0_pcie : reset_sync
    port map (
      RST_N     => rst_pcie_n_s,
      CLK       => CLK_PCIE,
      RST_OUT_N => rst_ddrif_0_pcie_sync_n_s
    );
  rst_ddrif_0_sys : reset_sync
    port map (
      RST_N     => rst_ddrif_0_n_s,
      CLK       => CLK_SYS,
      RST_OUT_N => rst_ddrif_0_sys_n_s
    );
  rst_ddrif_2_ddr : reset_sync
    port map (
      RST_N     => rst_ddrif_2_n_s,
      CLK       => CLK_DDR2,
      RST_OUT_N => rst_ddrif_2_ddr_n_s
    );
  rst_ddrif_2_pcie : reset_sync
    port map (
      RST_N     => rst_pcie_n_s,
      CLK       => CLK_PCIE,
      RST_OUT_N => rst_ddrif_2_pcie_sync_n_s
    );
  rst_ddrif_2_sys : reset_sync
    port map (
      RST_N     => rst_ddrif_2_n_s,
      CLK       => CLK_SYS,
      RST_OUT_N => rst_ddrif_2_sys_n_s
    );
  rst_ddrif_3_ddr : reset_sync
    port map (
      RST_N     => rst_ddrif_3_n_s,
      CLK       => CLK_DDR3,
      RST_OUT_N => rst_ddrif_3_ddr_n_s
    );
  rst_ddrif_3_pcie : reset_sync
    port map (
      RST_N     => rst_pcie_n_s,
      CLK       => CLK_PCIE,
      RST_OUT_N => rst_ddrif_3_pcie_sync_n_s
    );
  rst_ddrif_3_sys : reset_sync
    port map (
      RST_N     => rst_ddrif_3_n_s,
      CLK       => CLK_SYS,
      RST_OUT_N => rst_ddrif_3_sys_n_s
    );
  pcif_i : pcif
    port map (
      clk_mc                   => CLK_MC,
      clk_pcie                 => CLK_PCIE,
      mcdataout                => mcdataout_pcif_s,
      rst_mc_n                 => RST_MC_N,
      rst_pcie_n               => RST_PCIE_N,
      rxm_address              => RXM_ADDRESS,
      rxm_byte_enable          => RXM_BYTE_ENABLE,
      rxm_read                 => RXM_READ,
      rxm_write                => RXM_WRITE,
      rxm_write_data           => RXM_WRITE_DATA,
      mcaddr                   => mcaddr_s,
      mccs                     => mccs_s,
      mcdatain                 => mcdata_s,
      mcrwn                    => mcrwn_s,
      rxm_read_data            => RXM_READ_DATA,
      rxm_read_data_vald       => RXM_READ_DATA_VALD,
      rxm_response             => RXM_RESPONSE,
      rxm_wait_request         => RXM_WAIT_REQUEST,
      rxm_write_response_valid => RXM_WRITE_RESPONSE_VALID
    );

end architecture scm;
