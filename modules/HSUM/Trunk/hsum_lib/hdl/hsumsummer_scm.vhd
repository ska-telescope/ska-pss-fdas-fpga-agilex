----------------------------------------------------------------------------
-- Module Name:  hsumsummer
--
-- Source Path:  hsum_lib/hdl/hsumsummer_scm.vhd
--
-- Created:
--          by - droogm (COVNETICSDT17)
--          at - 10:27:05 31/01/2024
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.2a (Build 3)
---------------------------------------------------------------------------
--       __
--    ,/'__`\                             _     _
--   ,/ /  )_)   _   _   _   ___     __  | |__ (_)   __    ___
--   ( (    _  /' `\\ \ / //' _ `\ /'__`\|  __)| | /'__`)/',__)
--   '\ \__) )( (_) )\ ' / | ( ) |(  ___/| |_, | |( (___ \__, \
--    '\___,/  \___/  \_/  (_) (_)`\____)(___,)(_)`\___,)(____/
--
-- Copyright (c) Covnetics Limited 2024 All Rights Reserved. The information
-- contained herein remains the property of Covnetics Limited and may not be
-- copied or reproduced in any format or medium without the written consent
-- of Covnetics Limited.
--
----------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
library hsum_lib;
use hsum_lib.hsummci_pkg.all;
use hsum_lib.hsum_pkg.all;


architecture scm of hsumsummer is

  -- Architecture declarations

  -- Internal signal declarations
  -- Comparator enables to SUMMER_TREE.
  signal comp_en_s  : std_logic_vector(harmonic_g-1 downto 0);
  signal data_sum_s : std_logic_vector(last_column_c(harmonic_g-1)*32-1 downto 0);   -- To SUMMER_TREE.
  signal msel_s     : std_logic_vector(harmonic_g-1 downto 0);                       -- Indication to feed msel instead of data_sum into summer.
  -- Threshold selection controls to T_SEL (per harmonic).
  signal seed_num_s : std_logic_vector(harmonic_g*5-1 downto 0);                     -- Seed numbers being processed.
  -- Thresholds to SUMMER (per harmonic).
  signal t_s        : std_logic_vector(harmonic_g*32-1 downto 0);
  signal t_en_s     : std_logic_vector(harmonic_g-1 downto 0);                       -- Read enables for threshold RAMs.


  -- Component Declarations
  component hsumhpsel
  generic (
    summer_inst_g   : natural range 0 to 2;
    adder_latency_g : natural range 1 to 7;
    harmonic_g      : natural range 8 to 16
  );
  port (
    -- Control and configuration inputs.
    new_sum      : in     std_logic ;                                 -- Trigger to start summing.
    analysis_run : in     std_logic ;                                 -- Indicates the analysis run number.
    h            : in     std_logic_vector (3 downto 0);              -- Number of harmonics to process.
    p_en         : in     std_logic_vector (4 downto 0);              -- Number of orbital acceleration values to process.
    a            : in     std_logic_vector (3 downto 0);              -- Number of orbital acceleration ambiguity slopes to process.
    -- Data select to DDRIN.
    hpsel        : out    std_logic_vector (harmonic_g*7-1 downto 0);
    hpsel_en     : out    std_logic_vector (harmonic_g-1 downto 0);
    -- Micro signals for the configuration RAMs.
    hpsel_mci    : in     hsel_out_t ;
    hpsel_rd     : out    std_logic_vector (6 downto 0);
    -- Control response to TGEN.
    done_sum     : out    std_logic ;
    -- Information to TREP.
    row_info     : out    std_logic_vector (harmonic_g*7-1 downto 0); -- Row number for each harmonic.
    last_result  : out    std_logic ;                                 -- Indicates last result from SUMMER for last ambiguity slope.
    -- Comparator enables to SUMMER_TREE.
    comp_en      : out    std_logic_vector (harmonic_g-1 downto 0);
    msel         : out    std_logic_vector (harmonic_g-1 downto 0);   -- Indication to feed msel instead of data_sum into summer.
    -- Threshold selection controls to T_SEL (per harmonic).
    seed_num     : out    std_logic_vector (harmonic_g*5-1 downto 0); -- Seed numbers being processed.
    t_en         : out    std_logic_vector (harmonic_g-1 downto 0);   -- Read enables for threshold RAMs.
    -- Clocks and reset.
    clk_sys      : in     std_logic ;
    rst_sys_n    : in     std_logic ;
    clk_mc       : in     std_logic 
  );
  end component hsumhpsel;
  component hsummins
  generic (
    harmonic_g : natural range 8 to 16
  );
  port (
    data_sum_in  : in     std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0); -- From DDRIN.
    m            : in     std_logic_vector (31 downto 0);                               -- From config.
    msel         : in     std_logic_vector (harmonic_g-1 downto 0);                     -- From HP_SEL.
    data_sum_out : out    std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0); -- To SUMMER_TREE.
    clk_sys      : in     std_logic ;
    rst_sys_n    : in     std_logic 
  );
  end component hsummins;
  component hsumtree
  generic (
    harmonic_g : natural range 8 to 16
  );
  port (
    data_sum    : in     std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0); -- FOP data to sum.
    t           : in     std_logic_vector (harmonic_g*32-1 downto 0);                  -- Thresholds (per harmonic).
    comp_en     : in     std_logic_vector (harmonic_g-1 downto 0);                     -- Indicates when to perform comparison.
    -- Outputs to TREP.
    pwr         : out    std_logic_vector (last_column_c(harmonic_g-1)*32-1 downto 0); -- Summed power values.
    tc          : out    std_logic_vector (last_column_c(harmonic_g-1)-1 downto 0);    -- Indicates threshold has been crossed.
    -- Clocks and reset.
    clk_sys     : in     std_logic ;
    rst_sys_1_n : in     std_logic ;
    rst_sys_2_n : in     std_logic 
  );
  end component hsumtree;
  component hsumtsel
  generic (
    summer_inst_g   : natural range 0 to 2;
    adder_latency_g : natural range 1 to 7;
    harmonic_g      : natural range 8 to 16
  );
  port (
    -- Seed row number from HPSEL (per harmonic).
    seed_num  : in     std_logic_vector (harmonic_g*5-1 downto 0);
    t_en      : in     std_logic_vector (harmonic_g-1 downto 0);  -- Read enables for threshold RAMs.
    t_set     : in     std_logic ;                                -- Threshold set select.
    -- Micro signals for the configuration RAMs.
    tsel_mci  : in     tsel_out_t ;
    tsel_rd   : out    std_logic_vector (31 downto 0);
    -- Thresholds to SUMMER (per harmonic).
    t         : out    std_logic_vector (harmonic_g*32-1 downto 0);
    -- Clocks and reset.
    clk_sys   : in     std_logic ;
    rst_sys_n : in     std_logic ;
    clk_mc    : in     std_logic 
  );
  end component hsumtsel;

  -- Optional embedded configurations
  -- pragma synthesis_off
  for all : hsumhpsel use entity hsum_lib.hsumhpsel;
  for all : hsummins use entity hsum_lib.hsummins;
  for all : hsumtree use entity hsum_lib.hsumtree;
  for all : hsumtsel use entity hsum_lib.hsumtsel;
  -- pragma synthesis_on


begin

  -- Instance port mappings.
  hp_sel_i : hsumhpsel
    generic map (
      summer_inst_g   => summer_inst_g,
      adder_latency_g => adder_latency_g,
      harmonic_g      => harmonic_g
    )
    port map (
      new_sum      => new_sum,
      analysis_run => analysis_run,
      h            => h,
      p_en         => p_en,
      a            => a,
      hpsel        => hpsel,
      hpsel_en     => hpsel_en,
      hpsel_mci    => hpsel_mci,
      hpsel_rd     => hpsel_rd,
      done_sum     => done_sum,
      row_info     => row_info,
      last_result  => last_result,
      comp_en      => comp_en_s,
      msel         => msel_s,
      seed_num     => seed_num_s,
      t_en         => t_en_s,
      clk_sys      => clk_sys,
      rst_sys_n    => rst_sys_a_n,
      clk_mc       => clk_mc
    );
  mmux : hsummins
    generic map (
      harmonic_g => harmonic_g
    )
    port map (
      data_sum_in  => data_sum,
      m            => m,
      msel         => msel_s,
      data_sum_out => data_sum_s,
      clk_sys      => clk_sys,
      rst_sys_n    => rst_sys_a_n
    );
  summer_tree : hsumtree
    generic map (
      harmonic_g => harmonic_g
    )
    port map (
      data_sum    => data_sum_s,
      t           => t_s,
      comp_en     => comp_en_s,
      pwr         => pwr,
      tc          => tc,
      clk_sys     => clk_sys,
      rst_sys_1_n => rst_sys_b_n,
      rst_sys_2_n => rst_sys_c_n
    );
  t_sel : hsumtsel
    generic map (
      summer_inst_g   => summer_inst_g,
      adder_latency_g => adder_latency_g,
      harmonic_g      => harmonic_g
    )
    port map (
      seed_num  => seed_num_s,
      t_en      => t_en_s,
      t_set     => t_set,
      tsel_mci  => tsel_mci,
      tsel_rd   => tsel_rd,
      t         => t_s,
      clk_sys   => clk_sys,
      rst_sys_n => rst_sys_a_n,
      clk_mc    => clk_mc
    );

end architecture scm;
