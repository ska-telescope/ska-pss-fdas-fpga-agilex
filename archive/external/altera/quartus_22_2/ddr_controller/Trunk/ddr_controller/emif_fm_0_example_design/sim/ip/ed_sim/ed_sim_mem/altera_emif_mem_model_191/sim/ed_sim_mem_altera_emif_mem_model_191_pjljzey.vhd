-- ed_sim_mem_altera_emif_mem_model_191_pjljzey.vhd

-- This file was auto-generated from altera_emif_mem_model_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 21.3 170

library IEEE;
library altera_emif_mem_model_core_ddr4_191;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ed_sim_mem_altera_emif_mem_model_191_pjljzey is
	port (
		mem_ck      : in    std_logic_vector(0 downto 0)  := (others => '0'); -- mem.mem_ck,      CK clock
		mem_ck_n    : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_ck_n,    CK clock (negative leg)
		mem_a       : in    std_logic_vector(16 downto 0) := (others => '0'); --    .mem_a,       Address
		mem_act_n   : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_act_n,   Activation command
		mem_ba      : in    std_logic_vector(1 downto 0)  := (others => '0'); --    .mem_ba,      Bank address
		mem_bg      : in    std_logic_vector(1 downto 0)  := (others => '0'); --    .mem_bg,      Bank group
		mem_cke     : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_cke,     Clock enable
		mem_cs_n    : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_cs_n,    Chip select
		mem_odt     : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_odt,     On-die termination
		mem_reset_n : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_reset_n, Asynchronous reset
		mem_par     : in    std_logic_vector(0 downto 0)  := (others => '0'); --    .mem_par,     Command and address parity
		mem_alert_n : out   std_logic_vector(0 downto 0);                     --    .mem_alert_n, Alert flag
		mem_dqs     : inout std_logic_vector(8 downto 0)  := (others => '0'); --    .mem_dqs,     Data strobe
		mem_dqs_n   : inout std_logic_vector(8 downto 0)  := (others => '0'); --    .mem_dqs_n,   Data strobe (negative leg)
		mem_dq      : inout std_logic_vector(71 downto 0) := (others => '0'); --    .mem_dq,      Read/write data
		mem_dbi_n   : inout std_logic_vector(8 downto 0)  := (others => '0')  --    .mem_dbi_n,   Acts as either the data bus inversion pin, or the data mask pin, depending on configuration.
	);
end entity ed_sim_mem_altera_emif_mem_model_191_pjljzey;

architecture rtl of ed_sim_mem_altera_emif_mem_model_191_pjljzey is
	component altera_emif_ddrx_model_cmp is
		generic (
			PROTOCOL_ENUM                        : string  := "PROTOCOL_DDR4";
			PHY_PING_PONG_EN                     : boolean := false;
			MEM_FORMAT_ENUM                      : string  := "";
			DIAG_SIM_MEMORY_PRELOAD              : boolean := false;
			DIAG_SIM_MEMORY_PRELOAD_PRI_MEM_FILE : string  := "";
			DIAG_SIM_MEMORY_PRELOAD_SEC_MEM_FILE : string  := "";
			PORT_MEM_CK_WIDTH                    : integer := 1;
			PORT_MEM_CK_N_WIDTH                  : integer := 1;
			PORT_MEM_CK_BIDIR_WIDTH              : integer := 1;
			PORT_MEM_CK_BIDIR_N_WIDTH            : integer := 1;
			PORT_MEM_DK_WIDTH                    : integer := 1;
			PORT_MEM_DK_N_WIDTH                  : integer := 1;
			PORT_MEM_DKA_WIDTH                   : integer := 1;
			PORT_MEM_DKA_N_WIDTH                 : integer := 1;
			PORT_MEM_DKB_WIDTH                   : integer := 1;
			PORT_MEM_DKB_N_WIDTH                 : integer := 1;
			PORT_MEM_K_WIDTH                     : integer := 1;
			PORT_MEM_K_N_WIDTH                   : integer := 1;
			PORT_MEM_A_WIDTH                     : integer := 1;
			PORT_MEM_BA_WIDTH                    : integer := 1;
			PORT_MEM_BG_WIDTH                    : integer := 1;
			PORT_MEM_C_WIDTH                     : integer := 1;
			PORT_MEM_CKE_WIDTH                   : integer := 1;
			PORT_MEM_CS_N_WIDTH                  : integer := 1;
			PORT_MEM_RM_WIDTH                    : integer := 1;
			PORT_MEM_ODT_WIDTH                   : integer := 1;
			PORT_MEM_REQ_N_WIDTH                 : integer := 1;
			PORT_MEM_GNT_N_WIDTH                 : integer := 1;
			PORT_MEM_ERR_N_WIDTH                 : integer := 1;
			PORT_MEM_RAS_N_WIDTH                 : integer := 1;
			PORT_MEM_CAS_N_WIDTH                 : integer := 1;
			PORT_MEM_WE_N_WIDTH                  : integer := 1;
			PORT_MEM_RESET_N_WIDTH               : integer := 1;
			PORT_MEM_ACT_N_WIDTH                 : integer := 1;
			PORT_MEM_PAR_WIDTH                   : integer := 1;
			PORT_MEM_CA_WIDTH                    : integer := 1;
			PORT_MEM_REF_N_WIDTH                 : integer := 1;
			PORT_MEM_WPS_N_WIDTH                 : integer := 1;
			PORT_MEM_RPS_N_WIDTH                 : integer := 1;
			PORT_MEM_DOFF_N_WIDTH                : integer := 1;
			PORT_MEM_LDA_N_WIDTH                 : integer := 1;
			PORT_MEM_LDB_N_WIDTH                 : integer := 1;
			PORT_MEM_RWA_N_WIDTH                 : integer := 1;
			PORT_MEM_RWB_N_WIDTH                 : integer := 1;
			PORT_MEM_LBK0_N_WIDTH                : integer := 1;
			PORT_MEM_LBK1_N_WIDTH                : integer := 1;
			PORT_MEM_CFG_N_WIDTH                 : integer := 1;
			PORT_MEM_AP_WIDTH                    : integer := 1;
			PORT_MEM_AINV_WIDTH                  : integer := 1;
			PORT_MEM_DM_WIDTH                    : integer := 1;
			PORT_MEM_BWS_N_WIDTH                 : integer := 1;
			PORT_MEM_D_WIDTH                     : integer := 1;
			PORT_MEM_DQ_WIDTH                    : integer := 1;
			PORT_MEM_DBI_N_WIDTH                 : integer := 1;
			PORT_MEM_DQA_WIDTH                   : integer := 1;
			PORT_MEM_DQB_WIDTH                   : integer := 1;
			PORT_MEM_DINVA_WIDTH                 : integer := 1;
			PORT_MEM_DINVB_WIDTH                 : integer := 1;
			PORT_MEM_Q_WIDTH                     : integer := 1;
			PORT_MEM_DQS_WIDTH                   : integer := 1;
			PORT_MEM_DQS_N_WIDTH                 : integer := 1;
			PORT_MEM_QK_WIDTH                    : integer := 1;
			PORT_MEM_QK_N_WIDTH                  : integer := 1;
			PORT_MEM_QKA_WIDTH                   : integer := 1;
			PORT_MEM_QKA_N_WIDTH                 : integer := 1;
			PORT_MEM_QKB_WIDTH                   : integer := 1;
			PORT_MEM_QKB_N_WIDTH                 : integer := 1;
			PORT_MEM_CQ_WIDTH                    : integer := 1;
			PORT_MEM_CQ_N_WIDTH                  : integer := 1;
			PORT_MEM_ALERT_N_WIDTH               : integer := 1;
			PORT_MEM_PE_N_WIDTH                  : integer := 1;
			MEM_DISCRETE_CS_WIDTH                : integer := 1;
			MEM_CHIP_ID_WIDTH                    : integer := 0;
			MEM_ROW_ADDR_WIDTH                   : integer := 15;
			MEM_COL_ADDR_WIDTH                   : integer := 10;
			MEM_TRTP                             : integer := 8;
			MEM_TRCD                             : integer := 8;
			MEM_RANKS_PER_DIMM                   : integer := 1;
			MEM_NUM_OF_DIMMS                     : integer := 0;
			MEM_DM_EN                            : boolean := false;
			MEM_DISCRETE_MIRROR_ADDRESSING_EN    : boolean := false;
			MEM_MIRROR_ADDRESSING_EN             : boolean := false;
			MEM_INIT_MRS0                        : integer := 0;
			MEM_INIT_MRS1                        : integer := 0;
			MEM_INIT_MRS2                        : integer := 0;
			MEM_INIT_MRS3                        : integer := 0;
			MEM_VERBOSE                          : boolean := true;
			MEM_CFG_GEN_SBE                      : boolean := false;
			MEM_CFG_GEN_DBE                      : boolean := false;
			MEM_CLAMSHELL_EN                     : boolean := false
		);
		port (
			mem_ck         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck
			mem_ck_n       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck_n
			mem_a          : in    std_logic_vector(16 downto 0) := (others => 'X'); -- mem_a
			mem_act_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_act_n
			mem_ba         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- mem_ba
			mem_bg         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- mem_bg
			mem_cke        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cke
			mem_cs_n       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cs_n
			mem_odt        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_odt
			mem_reset_n    : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_reset_n
			mem_par        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_par
			mem_alert_n    : out   std_logic_vector(0 downto 0);                     -- mem_alert_n
			mem_dqs        : inout std_logic_vector(8 downto 0)  := (others => 'X'); -- mem_dqs
			mem_dqs_n      : inout std_logic_vector(8 downto 0)  := (others => 'X'); -- mem_dqs_n
			mem_dq         : inout std_logic_vector(71 downto 0) := (others => 'X'); -- mem_dq
			mem_dbi_n      : inout std_logic_vector(8 downto 0)  := (others => 'X'); -- mem_dbi_n
			mem_c          : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_c
			mem_rm         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_rm
			mem_ck_bidir   : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck
			mem_ck_bidir_n : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck_n
			mem_dk         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dk
			mem_dk_n       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dk_n
			mem_dka        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dka
			mem_dka_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dka_n
			mem_dkb        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dkb
			mem_dkb_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dkb_n
			mem_k          : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_k
			mem_k_n        : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_k_n
			mem_req_n      : out   std_logic_vector(0 downto 0);                     -- mem_req_n
			mem_gnt_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_gnt_n
			mem_err_n      : out   std_logic_vector(0 downto 0);                     -- mem_err_n
			mem_ras_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ras_n
			mem_cas_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cas_n
			mem_we_n       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_we_n
			mem_ca         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ca
			mem_ref_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ref_n
			mem_wps_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_wps_n
			mem_rps_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_rps_n
			mem_doff_n     : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_doff_n
			mem_lda_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_lda_n
			mem_ldb_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ldb_n
			mem_rwa_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_rwa_n
			mem_rwb_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_rwb_n
			mem_lbk0_n     : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_lbk0_n
			mem_lbk1_n     : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_lbk1_n
			mem_cfg_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cfg_n
			mem_ap         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ap
			mem_ainv       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ainv
			mem_dm         : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dm
			mem_bws_n      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_bws_n
			mem_d          : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_d
			mem_dqa        : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dqa
			mem_dqb        : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dqb
			mem_dinva      : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dinva
			mem_dinvb      : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_dinvb
			mem_q          : out   std_logic_vector(0 downto 0);                     -- mem_q
			mem_qk         : out   std_logic_vector(0 downto 0);                     -- mem_qk
			mem_qk_n       : out   std_logic_vector(0 downto 0);                     -- mem_qk_n
			mem_qka        : out   std_logic_vector(0 downto 0);                     -- mem_qka
			mem_qka_n      : out   std_logic_vector(0 downto 0);                     -- mem_qka_n
			mem_qkb        : out   std_logic_vector(0 downto 0);                     -- mem_qkb
			mem_qkb_n      : out   std_logic_vector(0 downto 0);                     -- mem_qkb_n
			mem_cq         : out   std_logic_vector(0 downto 0);                     -- mem_cq
			mem_cq_n       : out   std_logic_vector(0 downto 0);                     -- mem_cq_n
			mem_pe_n       : out   std_logic_vector(0 downto 0)                      -- mem_pe_n
		);
	end component altera_emif_ddrx_model_cmp;

	for core : altera_emif_ddrx_model_cmp
		use entity altera_emif_mem_model_core_ddr4_191.altera_emif_ddrx_model;
begin

	core : component altera_emif_ddrx_model_cmp
		generic map (
			PROTOCOL_ENUM                        => "PROTOCOL_DDR4",
			PHY_PING_PONG_EN                     => false,
			MEM_FORMAT_ENUM                      => "MEM_FORMAT_UDIMM",
			DIAG_SIM_MEMORY_PRELOAD              => false,
			DIAG_SIM_MEMORY_PRELOAD_PRI_MEM_FILE => "",
			DIAG_SIM_MEMORY_PRELOAD_SEC_MEM_FILE => "",
			PORT_MEM_CK_WIDTH                    => 1,
			PORT_MEM_CK_N_WIDTH                  => 1,
			PORT_MEM_CK_BIDIR_WIDTH              => 1,
			PORT_MEM_CK_BIDIR_N_WIDTH            => 1,
			PORT_MEM_DK_WIDTH                    => 1,
			PORT_MEM_DK_N_WIDTH                  => 1,
			PORT_MEM_DKA_WIDTH                   => 1,
			PORT_MEM_DKA_N_WIDTH                 => 1,
			PORT_MEM_DKB_WIDTH                   => 1,
			PORT_MEM_DKB_N_WIDTH                 => 1,
			PORT_MEM_K_WIDTH                     => 1,
			PORT_MEM_K_N_WIDTH                   => 1,
			PORT_MEM_A_WIDTH                     => 17,
			PORT_MEM_BA_WIDTH                    => 2,
			PORT_MEM_BG_WIDTH                    => 2,
			PORT_MEM_C_WIDTH                     => 1,
			PORT_MEM_CKE_WIDTH                   => 1,
			PORT_MEM_CS_N_WIDTH                  => 1,
			PORT_MEM_RM_WIDTH                    => 1,
			PORT_MEM_ODT_WIDTH                   => 1,
			PORT_MEM_REQ_N_WIDTH                 => 1,
			PORT_MEM_GNT_N_WIDTH                 => 1,
			PORT_MEM_ERR_N_WIDTH                 => 1,
			PORT_MEM_RAS_N_WIDTH                 => 1,
			PORT_MEM_CAS_N_WIDTH                 => 1,
			PORT_MEM_WE_N_WIDTH                  => 1,
			PORT_MEM_RESET_N_WIDTH               => 1,
			PORT_MEM_ACT_N_WIDTH                 => 1,
			PORT_MEM_PAR_WIDTH                   => 1,
			PORT_MEM_CA_WIDTH                    => 1,
			PORT_MEM_REF_N_WIDTH                 => 1,
			PORT_MEM_WPS_N_WIDTH                 => 1,
			PORT_MEM_RPS_N_WIDTH                 => 1,
			PORT_MEM_DOFF_N_WIDTH                => 1,
			PORT_MEM_LDA_N_WIDTH                 => 1,
			PORT_MEM_LDB_N_WIDTH                 => 1,
			PORT_MEM_RWA_N_WIDTH                 => 1,
			PORT_MEM_RWB_N_WIDTH                 => 1,
			PORT_MEM_LBK0_N_WIDTH                => 1,
			PORT_MEM_LBK1_N_WIDTH                => 1,
			PORT_MEM_CFG_N_WIDTH                 => 1,
			PORT_MEM_AP_WIDTH                    => 1,
			PORT_MEM_AINV_WIDTH                  => 1,
			PORT_MEM_DM_WIDTH                    => 1,
			PORT_MEM_BWS_N_WIDTH                 => 1,
			PORT_MEM_D_WIDTH                     => 1,
			PORT_MEM_DQ_WIDTH                    => 72,
			PORT_MEM_DBI_N_WIDTH                 => 9,
			PORT_MEM_DQA_WIDTH                   => 1,
			PORT_MEM_DQB_WIDTH                   => 1,
			PORT_MEM_DINVA_WIDTH                 => 1,
			PORT_MEM_DINVB_WIDTH                 => 1,
			PORT_MEM_Q_WIDTH                     => 1,
			PORT_MEM_DQS_WIDTH                   => 9,
			PORT_MEM_DQS_N_WIDTH                 => 9,
			PORT_MEM_QK_WIDTH                    => 1,
			PORT_MEM_QK_N_WIDTH                  => 1,
			PORT_MEM_QKA_WIDTH                   => 1,
			PORT_MEM_QKA_N_WIDTH                 => 1,
			PORT_MEM_QKB_WIDTH                   => 1,
			PORT_MEM_QKB_N_WIDTH                 => 1,
			PORT_MEM_CQ_WIDTH                    => 1,
			PORT_MEM_CQ_N_WIDTH                  => 1,
			PORT_MEM_ALERT_N_WIDTH               => 1,
			PORT_MEM_PE_N_WIDTH                  => 1,
			MEM_DISCRETE_CS_WIDTH                => 1,
			MEM_CHIP_ID_WIDTH                    => 0,
			MEM_ROW_ADDR_WIDTH                   => 15,
			MEM_COL_ADDR_WIDTH                   => 10,
			MEM_TRTP                             => 10,
			MEM_TRCD                             => 20,
			MEM_RANKS_PER_DIMM                   => 1,
			MEM_NUM_OF_DIMMS                     => 1,
			MEM_DM_EN                            => true,
			MEM_DISCRETE_MIRROR_ADDRESSING_EN    => false,
			MEM_MIRROR_ADDRESSING_EN             => true,
			MEM_INIT_MRS0                        => 0,
			MEM_INIT_MRS1                        => 0,
			MEM_INIT_MRS2                        => 0,
			MEM_INIT_MRS3                        => 0,
			MEM_VERBOSE                          => true,
			MEM_CFG_GEN_SBE                      => false,
			MEM_CFG_GEN_DBE                      => false,
			MEM_CLAMSHELL_EN                     => false
		)
		port map (
			mem_ck         => mem_ck,      -- mem.mem_ck
			mem_ck_n       => mem_ck_n,    --    .mem_ck_n
			mem_a          => mem_a,       --    .mem_a
			mem_act_n      => mem_act_n,   --    .mem_act_n
			mem_ba         => mem_ba,      --    .mem_ba
			mem_bg         => mem_bg,      --    .mem_bg
			mem_cke        => mem_cke,     --    .mem_cke
			mem_cs_n       => mem_cs_n,    --    .mem_cs_n
			mem_odt        => mem_odt,     --    .mem_odt
			mem_reset_n    => mem_reset_n, --    .mem_reset_n
			mem_par        => mem_par,     --    .mem_par
			mem_alert_n    => mem_alert_n, --    .mem_alert_n
			mem_dqs        => mem_dqs,     --    .mem_dqs
			mem_dqs_n      => mem_dqs_n,   --    .mem_dqs_n
			mem_dq         => mem_dq,      --    .mem_dq
			mem_dbi_n      => mem_dbi_n,   --    .mem_dbi_n
			mem_c          => "0",         -- (terminated)
			mem_rm         => "0",         -- (terminated)
			mem_ck_bidir   => open,        -- (terminated)
			mem_ck_bidir_n => open,        -- (terminated)
			mem_dk         => "0",         -- (terminated)
			mem_dk_n       => "0",         -- (terminated)
			mem_dka        => "0",         -- (terminated)
			mem_dka_n      => "0",         -- (terminated)
			mem_dkb        => "0",         -- (terminated)
			mem_dkb_n      => "0",         -- (terminated)
			mem_k          => "0",         -- (terminated)
			mem_k_n        => "0",         -- (terminated)
			mem_req_n      => open,        -- (terminated)
			mem_gnt_n      => "0",         -- (terminated)
			mem_err_n      => open,        -- (terminated)
			mem_ras_n      => "0",         -- (terminated)
			mem_cas_n      => "0",         -- (terminated)
			mem_we_n       => "0",         -- (terminated)
			mem_ca         => "0",         -- (terminated)
			mem_ref_n      => "0",         -- (terminated)
			mem_wps_n      => "0",         -- (terminated)
			mem_rps_n      => "0",         -- (terminated)
			mem_doff_n     => "0",         -- (terminated)
			mem_lda_n      => "0",         -- (terminated)
			mem_ldb_n      => "0",         -- (terminated)
			mem_rwa_n      => "0",         -- (terminated)
			mem_rwb_n      => "0",         -- (terminated)
			mem_lbk0_n     => "0",         -- (terminated)
			mem_lbk1_n     => "0",         -- (terminated)
			mem_cfg_n      => "0",         -- (terminated)
			mem_ap         => "0",         -- (terminated)
			mem_ainv       => "0",         -- (terminated)
			mem_dm         => "0",         -- (terminated)
			mem_bws_n      => "0",         -- (terminated)
			mem_d          => "0",         -- (terminated)
			mem_dqa        => open,        -- (terminated)
			mem_dqb        => open,        -- (terminated)
			mem_dinva      => open,        -- (terminated)
			mem_dinvb      => open,        -- (terminated)
			mem_q          => open,        -- (terminated)
			mem_qk         => open,        -- (terminated)
			mem_qk_n       => open,        -- (terminated)
			mem_qka        => open,        -- (terminated)
			mem_qka_n      => open,        -- (terminated)
			mem_qkb        => open,        -- (terminated)
			mem_qkb_n      => open,        -- (terminated)
			mem_cq         => open,        -- (terminated)
			mem_cq_n       => open,        -- (terminated)
			mem_pe_n       => open         -- (terminated)
		);

end architecture rtl; -- of ed_sim_mem_altera_emif_mem_model_191_pjljzey
