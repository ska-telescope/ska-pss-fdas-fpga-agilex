-- ed_sim_altera_mm_interconnect_1920_2l4tnfq.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 22.2 94

library IEEE;
library altera_merlin_master_translator_191;
library altera_merlin_slave_translator_191;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ed_sim_altera_mm_interconnect_1920_2l4tnfq is
	port (
		tg_ctrl_amm_0_address                                      : in  std_logic_vector(33 downto 0)  := (others => '0'); --                                        tg_ctrl_amm_0.address
		tg_ctrl_amm_0_waitrequest                                  : out std_logic;                                         --                                                     .waitrequest
		tg_ctrl_amm_0_burstcount                                   : in  std_logic_vector(6 downto 0)   := (others => '0'); --                                                     .burstcount
		tg_ctrl_amm_0_byteenable                                   : in  std_logic_vector(71 downto 0)  := (others => '0'); --                                                     .byteenable
		tg_ctrl_amm_0_read                                         : in  std_logic                      := '0';             --                                                     .read
		tg_ctrl_amm_0_readdata                                     : out std_logic_vector(575 downto 0);                    --                                                     .readdata
		tg_ctrl_amm_0_readdatavalid                                : out std_logic;                                         --                                                     .readdatavalid
		tg_ctrl_amm_0_write                                        : in  std_logic                      := '0';             --                                                     .write
		tg_ctrl_amm_0_writedata                                    : in  std_logic_vector(575 downto 0) := (others => '0'); --                                                     .writedata
		emif_fm_0_ctrl_amm_0_address                               : out std_logic_vector(26 downto 0);                     --                                 emif_fm_0_ctrl_amm_0.address
		emif_fm_0_ctrl_amm_0_write                                 : out std_logic;                                         --                                                     .write
		emif_fm_0_ctrl_amm_0_read                                  : out std_logic;                                         --                                                     .read
		emif_fm_0_ctrl_amm_0_readdata                              : in  std_logic_vector(575 downto 0) := (others => '0'); --                                                     .readdata
		emif_fm_0_ctrl_amm_0_writedata                             : out std_logic_vector(575 downto 0);                    --                                                     .writedata
		emif_fm_0_ctrl_amm_0_burstcount                            : out std_logic_vector(6 downto 0);                      --                                                     .burstcount
		emif_fm_0_ctrl_amm_0_byteenable                            : out std_logic_vector(71 downto 0);                     --                                                     .byteenable
		emif_fm_0_ctrl_amm_0_readdatavalid                         : in  std_logic                      := '0';             --                                                     .readdatavalid
		emif_fm_0_ctrl_amm_0_waitrequest                           : in  std_logic                      := '0';             --                                                     .waitrequest
		tg_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset : in  std_logic                      := '0';             -- tg_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		emif_fm_0_emif_usr_clk_clk                                 : in  std_logic                      := '0'              --                               emif_fm_0_emif_usr_clk.clk
	);
end entity ed_sim_altera_mm_interconnect_1920_2l4tnfq;

architecture rtl of ed_sim_altera_mm_interconnect_1920_2l4tnfq is
	component ed_sim_altera_merlin_master_translator_191_g7h47bq_cmp is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0;
			SYNC_RESET                  : integer := 0;
			WAITREQUEST_ALLOWANCE       : integer := 0
		);
		port (
			clk                    : in  std_logic                      := 'X';             -- clk
			reset                  : in  std_logic                      := 'X';             -- reset
			uav_address            : out std_logic_vector(33 downto 0);                     -- address
			uav_burstcount         : out std_logic_vector(13 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                         -- read
			uav_write              : out std_logic;                                         -- write
			uav_waitrequest        : in  std_logic                      := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                      := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(71 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(575 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(575 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                         -- lock
			uav_debugaccess        : out std_logic;                                         -- debugaccess
			av_address             : in  std_logic_vector(33 downto 0)  := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                         -- waitrequest
			av_burstcount          : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(71 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                      := 'X';             -- read
			av_readdata            : out std_logic_vector(575 downto 0);                    -- readdata
			av_readdatavalid       : out std_logic;                                         -- readdatavalid
			av_write               : in  std_logic                      := 'X';             -- write
			av_writedata           : in  std_logic_vector(575 downto 0) := (others => 'X'); -- writedata
			av_beginbursttransfer  : in  std_logic                      := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                      := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                      := 'X';             -- chipselect
			av_lock                : in  std_logic                      := 'X';             -- lock
			av_debugaccess         : in  std_logic                      := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                         -- clken
			av_clken               : in  std_logic                      := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                      -- response
			uav_writeresponsevalid : in  std_logic                      := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                          -- writeresponsevalid
		);
	end component ed_sim_altera_merlin_master_translator_191_g7h47bq_cmp;

	component ed_sim_altera_merlin_slave_translator_191_x56fcki_cmp is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0;
			WAITREQUEST_ALLOWANCE          : integer := 0;
			SYNC_RESET                     : integer := 0
		);
		port (
			clk                    : in  std_logic                      := 'X';             -- clk
			reset                  : in  std_logic                      := 'X';             -- reset
			uav_address            : in  std_logic_vector(33 downto 0)  := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(13 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                      := 'X';             -- read
			uav_write              : in  std_logic                      := 'X';             -- write
			uav_waitrequest        : out std_logic;                                         -- waitrequest
			uav_readdatavalid      : out std_logic;                                         -- readdatavalid
			uav_byteenable         : in  std_logic_vector(71 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(575 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(575 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                      := 'X';             -- lock
			uav_debugaccess        : in  std_logic                      := 'X';             -- debugaccess
			av_address             : out std_logic_vector(26 downto 0);                     -- address
			av_write               : out std_logic;                                         -- write
			av_read                : out std_logic;                                         -- read
			av_readdata            : in  std_logic_vector(575 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(575 downto 0);                    -- writedata
			av_burstcount          : out std_logic_vector(6 downto 0);                      -- burstcount
			av_byteenable          : out std_logic_vector(71 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                      := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                      := 'X';             -- waitrequest
			av_begintransfer       : out std_logic;                                         -- begintransfer
			av_beginbursttransfer  : out std_logic;                                         -- beginbursttransfer
			av_writebyteenable     : out std_logic_vector(71 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                         -- lock
			av_chipselect          : out std_logic;                                         -- chipselect
			av_clken               : out std_logic;                                         -- clken
			uav_clken              : in  std_logic                      := 'X';             -- clken
			av_debugaccess         : out std_logic;                                         -- debugaccess
			av_outputenable        : out std_logic;                                         -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                      -- response
			av_response            : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                         -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                      := 'X'              -- writeresponsevalid
		);
	end component ed_sim_altera_merlin_slave_translator_191_x56fcki_cmp;

	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_waitrequest   : std_logic;                      -- emif_fm_0_ctrl_amm_0_translator:uav_waitrequest -> tg_ctrl_amm_0_translator:uav_waitrequest
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_readdata      : std_logic_vector(575 downto 0); -- emif_fm_0_ctrl_amm_0_translator:uav_readdata -> tg_ctrl_amm_0_translator:uav_readdata
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_debugaccess   : std_logic;                      -- tg_ctrl_amm_0_translator:uav_debugaccess -> emif_fm_0_ctrl_amm_0_translator:uav_debugaccess
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_address       : std_logic_vector(33 downto 0);  -- tg_ctrl_amm_0_translator:uav_address -> emif_fm_0_ctrl_amm_0_translator:uav_address
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_read          : std_logic;                      -- tg_ctrl_amm_0_translator:uav_read -> emif_fm_0_ctrl_amm_0_translator:uav_read
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_byteenable    : std_logic_vector(71 downto 0);  -- tg_ctrl_amm_0_translator:uav_byteenable -> emif_fm_0_ctrl_amm_0_translator:uav_byteenable
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_readdatavalid : std_logic;                      -- emif_fm_0_ctrl_amm_0_translator:uav_readdatavalid -> tg_ctrl_amm_0_translator:uav_readdatavalid
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_lock          : std_logic;                      -- tg_ctrl_amm_0_translator:uav_lock -> emif_fm_0_ctrl_amm_0_translator:uav_lock
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_write         : std_logic;                      -- tg_ctrl_amm_0_translator:uav_write -> emif_fm_0_ctrl_amm_0_translator:uav_write
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_writedata     : std_logic_vector(575 downto 0); -- tg_ctrl_amm_0_translator:uav_writedata -> emif_fm_0_ctrl_amm_0_translator:uav_writedata
	signal tg_ctrl_amm_0_translator_avalon_universal_master_0_burstcount    : std_logic_vector(13 downto 0);  -- tg_ctrl_amm_0_translator:uav_burstcount -> emif_fm_0_ctrl_amm_0_translator:uav_burstcount

	for tg_ctrl_amm_0_translator : ed_sim_altera_merlin_master_translator_191_g7h47bq_cmp
		use entity altera_merlin_master_translator_191.ed_sim_altera_merlin_master_translator_191_g7h47bq;
	for emif_fm_0_ctrl_amm_0_translator : ed_sim_altera_merlin_slave_translator_191_x56fcki_cmp
		use entity altera_merlin_slave_translator_191.ed_sim_altera_merlin_slave_translator_191_x56fcki;
begin

	tg_ctrl_amm_0_translator : component ed_sim_altera_merlin_master_translator_191_g7h47bq_cmp
		generic map (
			AV_ADDRESS_W                => 34,
			AV_DATA_W                   => 576,
			AV_BURSTCOUNT_W             => 7,
			AV_BYTEENABLE_W             => 72,
			UAV_ADDRESS_W               => 34,
			UAV_BURSTCOUNT_W            => 14,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 1,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 72,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 1,
			UAV_CONSTANT_BURST_BEHAVIOR => 1,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0,
			SYNC_RESET                  => 1,
			WAITREQUEST_ALLOWANCE       => 0
		)
		port map (
			clk                    => emif_fm_0_emif_usr_clk_clk,                                       --                       clk.clk
			reset                  => tg_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset,       --                     reset.reset
			uav_address            => tg_ctrl_amm_0_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => tg_ctrl_amm_0_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => tg_ctrl_amm_0_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => tg_ctrl_amm_0_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => tg_ctrl_amm_0_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => tg_ctrl_amm_0_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => tg_ctrl_amm_0_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => tg_ctrl_amm_0_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => tg_ctrl_amm_0_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => tg_ctrl_amm_0_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => tg_ctrl_amm_0_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => tg_ctrl_amm_0_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => tg_ctrl_amm_0_waitrequest,                                        --                          .waitrequest
			av_burstcount          => tg_ctrl_amm_0_burstcount,                                         --                          .burstcount
			av_byteenable          => tg_ctrl_amm_0_byteenable,                                         --                          .byteenable
			av_read                => tg_ctrl_amm_0_read,                                               --                          .read
			av_readdata            => tg_ctrl_amm_0_readdata,                                           --                          .readdata
			av_readdatavalid       => tg_ctrl_amm_0_readdatavalid,                                      --                          .readdatavalid
			av_write               => tg_ctrl_amm_0_write,                                              --                          .write
			av_writedata           => tg_ctrl_amm_0_writedata,                                          --                          .writedata
			av_beginbursttransfer  => '0',                                                              --               (terminated)
			av_begintransfer       => '0',                                                              --               (terminated)
			av_chipselect          => '0',                                                              --               (terminated)
			av_lock                => '0',                                                              --               (terminated)
			av_debugaccess         => '0',                                                              --               (terminated)
			uav_clken              => open,                                                             --               (terminated)
			av_clken               => '1',                                                              --               (terminated)
			uav_response           => "00",                                                             --               (terminated)
			av_response            => open,                                                             --               (terminated)
			uav_writeresponsevalid => '0',                                                              --               (terminated)
			av_writeresponsevalid  => open                                                              --               (terminated)
		);

	emif_fm_0_ctrl_amm_0_translator : component ed_sim_altera_merlin_slave_translator_191_x56fcki_cmp
		generic map (
			AV_ADDRESS_W                   => 27,
			AV_DATA_W                      => 576,
			UAV_DATA_W                     => 576,
			AV_BURSTCOUNT_W                => 7,
			AV_BYTEENABLE_W                => 72,
			UAV_BYTEENABLE_W               => 72,
			UAV_ADDRESS_W                  => 34,
			UAV_BURSTCOUNT_W               => 14,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 1,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 72,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0,
			WAITREQUEST_ALLOWANCE          => 0,
			SYNC_RESET                     => 1
		)
		port map (
			clk                    => emif_fm_0_emif_usr_clk_clk,                                       --                      clk.clk
			reset                  => tg_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset,       --                    reset.reset
			uav_address            => tg_ctrl_amm_0_translator_avalon_universal_master_0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => tg_ctrl_amm_0_translator_avalon_universal_master_0_burstcount,    --                         .burstcount
			uav_read               => tg_ctrl_amm_0_translator_avalon_universal_master_0_read,          --                         .read
			uav_write              => tg_ctrl_amm_0_translator_avalon_universal_master_0_write,         --                         .write
			uav_waitrequest        => tg_ctrl_amm_0_translator_avalon_universal_master_0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => tg_ctrl_amm_0_translator_avalon_universal_master_0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => tg_ctrl_amm_0_translator_avalon_universal_master_0_byteenable,    --                         .byteenable
			uav_readdata           => tg_ctrl_amm_0_translator_avalon_universal_master_0_readdata,      --                         .readdata
			uav_writedata          => tg_ctrl_amm_0_translator_avalon_universal_master_0_writedata,     --                         .writedata
			uav_lock               => tg_ctrl_amm_0_translator_avalon_universal_master_0_lock,          --                         .lock
			uav_debugaccess        => tg_ctrl_amm_0_translator_avalon_universal_master_0_debugaccess,   --                         .debugaccess
			av_address             => emif_fm_0_ctrl_amm_0_address,                                     --      avalon_anti_slave_0.address
			av_write               => emif_fm_0_ctrl_amm_0_write,                                       --                         .write
			av_read                => emif_fm_0_ctrl_amm_0_read,                                        --                         .read
			av_readdata            => emif_fm_0_ctrl_amm_0_readdata,                                    --                         .readdata
			av_writedata           => emif_fm_0_ctrl_amm_0_writedata,                                   --                         .writedata
			av_burstcount          => emif_fm_0_ctrl_amm_0_burstcount,                                  --                         .burstcount
			av_byteenable          => emif_fm_0_ctrl_amm_0_byteenable,                                  --                         .byteenable
			av_readdatavalid       => emif_fm_0_ctrl_amm_0_readdatavalid,                               --                         .readdatavalid
			av_waitrequest         => emif_fm_0_ctrl_amm_0_waitrequest,                                 --                         .waitrequest
			av_begintransfer       => open,                                                             --              (terminated)
			av_beginbursttransfer  => open,                                                             --              (terminated)
			av_writebyteenable     => open,                                                             --              (terminated)
			av_lock                => open,                                                             --              (terminated)
			av_chipselect          => open,                                                             --              (terminated)
			av_clken               => open,                                                             --              (terminated)
			uav_clken              => '0',                                                              --              (terminated)
			av_debugaccess         => open,                                                             --              (terminated)
			av_outputenable        => open,                                                             --              (terminated)
			uav_response           => open,                                                             --              (terminated)
			av_response            => "00",                                                             --              (terminated)
			uav_writeresponsevalid => open,                                                             --              (terminated)
			av_writeresponsevalid  => '0'                                                               --              (terminated)
		);

end architecture rtl; -- of ed_sim_altera_mm_interconnect_1920_2l4tnfq
