-- PCIE_HIP_FDAS_mm_rd_transparent_1.vhd

-- Generated using ACDS version 22.4 94

library IEEE;
library mm_rd_transparent_10;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PCIE_HIP_FDAS_mm_rd_transparent_1 is
	generic (
		DATA_WIDTH       : integer := 512;
		BYTE_SIZE        : integer := 8;
		ADDRESS_WIDTH    : integer := 26;
		BURSTCOUNT_WIDTH : integer := 4
	);
	port (
		clk              : in  std_logic                                                 := '0';             -- clock.clk
		reset            : in  std_logic                                                 := '0';             -- reset.reset
		s0_waitrequest   : out std_logic;                                                                    --    s0.waitrequest
		s0_readdata      : out std_logic_vector((((DATA_WIDTH-1)-0)+1)-1 downto 0);                          --      .readdata
		s0_readdatavalid : out std_logic;                                                                    --      .readdatavalid
		s0_response      : out std_logic_vector(1 downto 0);                                                 --      .response
		s0_burstcount    : in  std_logic_vector((((BURSTCOUNT_WIDTH-1)-0)+1)-1 downto 0) := (others => '0'); --      .burstcount
		s0_address       : in  std_logic_vector((((ADDRESS_WIDTH-1)-0)+1)-1 downto 0)    := (others => '0'); --      .address
		s0_read          : in  std_logic                                                 := '0';             --      .read
		m0_waitrequest   : in  std_logic                                                 := '0';             --    m0.waitrequest
		m0_readdata      : in  std_logic_vector((((DATA_WIDTH-1)-0)+1)-1 downto 0)       := (others => '0'); --      .readdata
		m0_readdatavalid : in  std_logic                                                 := '0';             --      .readdatavalid
		m0_response      : in  std_logic_vector(1 downto 0)                              := (others => '0'); --      .response
		m0_burstcount    : out std_logic_vector((((BURSTCOUNT_WIDTH-1)-0)+1)-1 downto 0);                    --      .burstcount
		m0_address       : out std_logic_vector((((ADDRESS_WIDTH-1)-0)+1)-1 downto 0);                       --      .address
		m0_read          : out std_logic                                                                     --      .read
	);
end entity PCIE_HIP_FDAS_mm_rd_transparent_1;

architecture rtl of PCIE_HIP_FDAS_mm_rd_transparent_1 is
	component mm_rd_transparent_cmp is
		generic (
			DATA_WIDTH       : integer := 256;
			BYTE_SIZE        : integer := 8;
			ADDRESS_WIDTH    : integer := 32;
			BURSTCOUNT_WIDTH : integer := 4
		);
		port (
			clk              : in  std_logic                                                 := 'X';             -- clk
			reset            : in  std_logic                                                 := 'X';             -- reset
			s0_waitrequest   : out std_logic;                                                                    -- waitrequest
			s0_readdata      : out std_logic_vector((((DATA_WIDTH-1)-0)+1)-1 downto 0);                          -- readdata
			s0_readdatavalid : out std_logic;                                                                    -- readdatavalid
			s0_response      : out std_logic_vector(1 downto 0);                                                 -- response
			s0_burstcount    : in  std_logic_vector((((BURSTCOUNT_WIDTH-1)-0)+1)-1 downto 0) := (others => 'X'); -- burstcount
			s0_address       : in  std_logic_vector((((ADDRESS_WIDTH-1)-0)+1)-1 downto 0)    := (others => 'X'); -- address
			s0_read          : in  std_logic                                                 := 'X';             -- read
			m0_waitrequest   : in  std_logic                                                 := 'X';             -- waitrequest
			m0_readdata      : in  std_logic_vector((((DATA_WIDTH-1)-0)+1)-1 downto 0)       := (others => 'X'); -- readdata
			m0_readdatavalid : in  std_logic                                                 := 'X';             -- readdatavalid
			m0_response      : in  std_logic_vector(1 downto 0)                              := (others => 'X'); -- response
			m0_burstcount    : out std_logic_vector((((BURSTCOUNT_WIDTH-1)-0)+1)-1 downto 0);                    -- burstcount
			m0_address       : out std_logic_vector((((ADDRESS_WIDTH-1)-0)+1)-1 downto 0);                       -- address
			m0_read          : out std_logic                                                                     -- read
		);
	end component mm_rd_transparent_cmp;

	for mm_rd_transparent_1 : mm_rd_transparent_cmp
		use entity mm_rd_transparent_10.mm_rd_transparent;
begin

	mm_rd_transparent_1 : component mm_rd_transparent_cmp
		generic map (
			DATA_WIDTH       => DATA_WIDTH,
			BYTE_SIZE        => BYTE_SIZE,
			ADDRESS_WIDTH    => ADDRESS_WIDTH,
			BURSTCOUNT_WIDTH => BURSTCOUNT_WIDTH
		)
		port map (
			clk              => clk,              -- clock.clk
			reset            => reset,            -- reset.reset
			s0_waitrequest   => s0_waitrequest,   --    s0.waitrequest
			s0_readdata      => s0_readdata,      --      .readdata
			s0_readdatavalid => s0_readdatavalid, --      .readdatavalid
			s0_response      => s0_response,      --      .response
			s0_burstcount    => s0_burstcount,    --      .burstcount
			s0_address       => s0_address,       --      .address
			s0_read          => s0_read,          --      .read
			m0_waitrequest   => m0_waitrequest,   --    m0.waitrequest
			m0_readdata      => m0_readdata,      --      .readdata
			m0_readdatavalid => m0_readdatavalid, --      .readdatavalid
			m0_response      => m0_response,      --      .response
			m0_burstcount    => m0_burstcount,    --      .burstcount
			m0_address       => m0_address,       --      .address
			m0_read          => m0_read           --      .read
		);

end architecture rtl; -- of PCIE_HIP_FDAS_mm_rd_transparent_1
